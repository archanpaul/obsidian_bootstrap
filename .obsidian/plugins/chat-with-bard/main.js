/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GeminiPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/Modals/OpenChatModal.ts
var import_obsidian = require("obsidian");
var OpenChatModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(app2, onSelected) {
    super(app2);
    this.onSelected = onSelected;
  }
  getItems() {
    return app.vault.getFiles().filter((file) => file.extension == "gemini");
  }
  getItemText(item) {
    return item.path.replace(".gemini", "");
  }
  onChooseItem(item, evt) {
    this.onSelected(item);
  }
};

// src/Views/GeminiChatView.ts
var import_obsidian4 = require("obsidian");

// src/Components/ChatMessageComponent.ts
var import_obsidian2 = require("obsidian");
var _text, _UserMessage, _ParentElement, _App, _Plugin;
var ChatMessageComponent = class {
  constructor(text, user, parent, app2, plugin) {
    __privateAdd(this, _text, void 0);
    __privateAdd(this, _UserMessage, void 0);
    __privateAdd(this, _ParentElement, void 0);
    __privateAdd(this, _App, void 0);
    __privateAdd(this, _Plugin, void 0);
    __privateSet(this, _text, text);
    __privateSet(this, _UserMessage, user);
    __privateSet(this, _ParentElement, parent);
    __privateSet(this, _App, app2);
    __privateSet(this, _Plugin, plugin);
    const message = document.createElement("div");
    const buttonPanel = document.createElement("div");
    buttonPanel.addClass("message-button-panel");
    buttonPanel.style.opacity = "0";
    const copyButton = document.createElement("button");
    copyButton.addClass("message-button");
    copyButton.innerHTML = '<span class="clipboard-icon">\u{1F4CB}</span>';
    copyButton.addEventListener("click", () => {
      navigator.clipboard.writeText(__privateGet(this, _text)).then(() => {
        copyButton.innerHTML = '<span class="checkmark-icon">\u2714\uFE0F</span>';
        setTimeout(() => {
          copyButton.innerHTML = '<span class="clipboard-icon">\u{1F4CB}</span>';
        }, 3e3);
      }).catch((err) => {
        console.error("Failed to copy: ", err);
      });
    });
    buttonPanel.append(copyButton);
    const content = document.createElement("div");
    import_obsidian2.MarkdownRenderer.render(__privateGet(this, _App), text, content, "", __privateGet(this, _Plugin));
    message.classList.add("chat-message");
    if (user)
      message.classList.add("user-message");
    else
      message.classList.add("ai-message");
    message.style.position = "relative";
    message.style.padding = "10px";
    message.appendChild(buttonPanel);
    message.appendChild(content);
    parent.prepend(message);
    message.addEventListener("mouseenter", () => {
      buttonPanel.style.opacity = "1";
    });
    message.addEventListener("mouseleave", () => {
      buttonPanel.style.opacity = "0";
    });
  }
};
_text = new WeakMap();
_UserMessage = new WeakMap();
_ParentElement = new WeakMap();
_App = new WeakMap();
_Plugin = new WeakMap();

// node_modules/@google/generative-ai/dist/index.mjs
var POSSIBLE_ROLES = ["user", "model", "function", "system"];
var HarmCategory;
(function(HarmCategory2) {
  HarmCategory2["HARM_CATEGORY_UNSPECIFIED"] = "HARM_CATEGORY_UNSPECIFIED";
  HarmCategory2["HARM_CATEGORY_HATE_SPEECH"] = "HARM_CATEGORY_HATE_SPEECH";
  HarmCategory2["HARM_CATEGORY_SEXUALLY_EXPLICIT"] = "HARM_CATEGORY_SEXUALLY_EXPLICIT";
  HarmCategory2["HARM_CATEGORY_HARASSMENT"] = "HARM_CATEGORY_HARASSMENT";
  HarmCategory2["HARM_CATEGORY_DANGEROUS_CONTENT"] = "HARM_CATEGORY_DANGEROUS_CONTENT";
})(HarmCategory || (HarmCategory = {}));
var HarmBlockThreshold;
(function(HarmBlockThreshold2) {
  HarmBlockThreshold2["HARM_BLOCK_THRESHOLD_UNSPECIFIED"] = "HARM_BLOCK_THRESHOLD_UNSPECIFIED";
  HarmBlockThreshold2["BLOCK_LOW_AND_ABOVE"] = "BLOCK_LOW_AND_ABOVE";
  HarmBlockThreshold2["BLOCK_MEDIUM_AND_ABOVE"] = "BLOCK_MEDIUM_AND_ABOVE";
  HarmBlockThreshold2["BLOCK_ONLY_HIGH"] = "BLOCK_ONLY_HIGH";
  HarmBlockThreshold2["BLOCK_NONE"] = "BLOCK_NONE";
})(HarmBlockThreshold || (HarmBlockThreshold = {}));
var HarmProbability;
(function(HarmProbability2) {
  HarmProbability2["HARM_PROBABILITY_UNSPECIFIED"] = "HARM_PROBABILITY_UNSPECIFIED";
  HarmProbability2["NEGLIGIBLE"] = "NEGLIGIBLE";
  HarmProbability2["LOW"] = "LOW";
  HarmProbability2["MEDIUM"] = "MEDIUM";
  HarmProbability2["HIGH"] = "HIGH";
})(HarmProbability || (HarmProbability = {}));
var BlockReason;
(function(BlockReason2) {
  BlockReason2["BLOCKED_REASON_UNSPECIFIED"] = "BLOCKED_REASON_UNSPECIFIED";
  BlockReason2["SAFETY"] = "SAFETY";
  BlockReason2["OTHER"] = "OTHER";
})(BlockReason || (BlockReason = {}));
var FinishReason;
(function(FinishReason2) {
  FinishReason2["FINISH_REASON_UNSPECIFIED"] = "FINISH_REASON_UNSPECIFIED";
  FinishReason2["STOP"] = "STOP";
  FinishReason2["MAX_TOKENS"] = "MAX_TOKENS";
  FinishReason2["SAFETY"] = "SAFETY";
  FinishReason2["RECITATION"] = "RECITATION";
  FinishReason2["OTHER"] = "OTHER";
})(FinishReason || (FinishReason = {}));
var TaskType;
(function(TaskType2) {
  TaskType2["TASK_TYPE_UNSPECIFIED"] = "TASK_TYPE_UNSPECIFIED";
  TaskType2["RETRIEVAL_QUERY"] = "RETRIEVAL_QUERY";
  TaskType2["RETRIEVAL_DOCUMENT"] = "RETRIEVAL_DOCUMENT";
  TaskType2["SEMANTIC_SIMILARITY"] = "SEMANTIC_SIMILARITY";
  TaskType2["CLASSIFICATION"] = "CLASSIFICATION";
  TaskType2["CLUSTERING"] = "CLUSTERING";
})(TaskType || (TaskType = {}));
var FunctionCallingMode;
(function(FunctionCallingMode2) {
  FunctionCallingMode2["MODE_UNSPECIFIED"] = "MODE_UNSPECIFIED";
  FunctionCallingMode2["AUTO"] = "AUTO";
  FunctionCallingMode2["ANY"] = "ANY";
  FunctionCallingMode2["NONE"] = "NONE";
})(FunctionCallingMode || (FunctionCallingMode = {}));
var FunctionDeclarationSchemaType;
(function(FunctionDeclarationSchemaType2) {
  FunctionDeclarationSchemaType2["STRING"] = "STRING";
  FunctionDeclarationSchemaType2["NUMBER"] = "NUMBER";
  FunctionDeclarationSchemaType2["INTEGER"] = "INTEGER";
  FunctionDeclarationSchemaType2["BOOLEAN"] = "BOOLEAN";
  FunctionDeclarationSchemaType2["ARRAY"] = "ARRAY";
  FunctionDeclarationSchemaType2["OBJECT"] = "OBJECT";
})(FunctionDeclarationSchemaType || (FunctionDeclarationSchemaType = {}));
var GoogleGenerativeAIError = class extends Error {
  constructor(message) {
    super(`[GoogleGenerativeAI Error]: ${message}`);
  }
};
var GoogleGenerativeAIResponseError = class extends GoogleGenerativeAIError {
  constructor(message, response) {
    super(message);
    this.response = response;
  }
};
var GoogleGenerativeAIFetchError = class extends GoogleGenerativeAIError {
  constructor(message, status, statusText, errorDetails) {
    super(message);
    this.status = status;
    this.statusText = statusText;
    this.errorDetails = errorDetails;
  }
};
var GoogleGenerativeAIRequestInputError = class extends GoogleGenerativeAIError {
};
var DEFAULT_BASE_URL = "https://generativelanguage.googleapis.com";
var DEFAULT_API_VERSION = "v1beta";
var PACKAGE_VERSION = "0.12.0";
var PACKAGE_LOG_HEADER = "genai-js";
var Task;
(function(Task2) {
  Task2["GENERATE_CONTENT"] = "generateContent";
  Task2["STREAM_GENERATE_CONTENT"] = "streamGenerateContent";
  Task2["COUNT_TOKENS"] = "countTokens";
  Task2["EMBED_CONTENT"] = "embedContent";
  Task2["BATCH_EMBED_CONTENTS"] = "batchEmbedContents";
})(Task || (Task = {}));
var RequestUrl = class {
  constructor(model, task, apiKey, stream, requestOptions) {
    this.model = model;
    this.task = task;
    this.apiKey = apiKey;
    this.stream = stream;
    this.requestOptions = requestOptions;
  }
  toString() {
    var _a, _b;
    const apiVersion = ((_a = this.requestOptions) === null || _a === void 0 ? void 0 : _a.apiVersion) || DEFAULT_API_VERSION;
    const baseUrl = ((_b = this.requestOptions) === null || _b === void 0 ? void 0 : _b.baseUrl) || DEFAULT_BASE_URL;
    let url = `${baseUrl}/${apiVersion}/${this.model}:${this.task}`;
    if (this.stream) {
      url += "?alt=sse";
    }
    return url;
  }
};
function getClientHeaders(requestOptions) {
  const clientHeaders = [];
  if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient) {
    clientHeaders.push(requestOptions.apiClient);
  }
  clientHeaders.push(`${PACKAGE_LOG_HEADER}/${PACKAGE_VERSION}`);
  return clientHeaders.join(" ");
}
async function getHeaders(url) {
  const headers = new Headers();
  headers.append("Content-Type", "application/json");
  headers.append("x-goog-api-client", getClientHeaders(url.requestOptions));
  headers.append("x-goog-api-key", url.apiKey);
  let customHeaders = url.requestOptions.customHeaders;
  if (customHeaders) {
    if (!(customHeaders instanceof Headers)) {
      try {
        customHeaders = new Headers(customHeaders);
      } catch (e) {
        throw new GoogleGenerativeAIRequestInputError(`unable to convert customHeaders value ${JSON.stringify(customHeaders)} to Headers: ${e.message}`);
      }
    }
    for (const [headerName, headerValue] of customHeaders.entries()) {
      if (headerName === "x-goog-api-key") {
        throw new GoogleGenerativeAIRequestInputError(`Cannot set reserved header name ${headerName}`);
      } else if (headerName === "x-goog-api-client") {
        throw new GoogleGenerativeAIRequestInputError(`Header name ${headerName} can only be set using the apiClient field`);
      }
      headers.append(headerName, headerValue);
    }
  }
  return headers;
}
async function constructRequest(model, task, apiKey, stream, body, requestOptions) {
  const url = new RequestUrl(model, task, apiKey, stream, requestOptions);
  return {
    url: url.toString(),
    fetchOptions: Object.assign(Object.assign({}, buildFetchOptions(requestOptions)), { method: "POST", headers: await getHeaders(url), body })
  };
}
async function makeRequest(model, task, apiKey, stream, body, requestOptions) {
  return _makeRequestInternal(model, task, apiKey, stream, body, requestOptions, fetch);
}
async function _makeRequestInternal(model, task, apiKey, stream, body, requestOptions, fetchFn = fetch) {
  const url = new RequestUrl(model, task, apiKey, stream, requestOptions);
  let response;
  try {
    const request = await constructRequest(model, task, apiKey, stream, body, requestOptions);
    response = await fetchFn(request.url, request.fetchOptions);
    if (!response.ok) {
      let message = "";
      let errorDetails;
      try {
        const json = await response.json();
        message = json.error.message;
        if (json.error.details) {
          message += ` ${JSON.stringify(json.error.details)}`;
          errorDetails = json.error.details;
        }
      } catch (e) {
      }
      throw new GoogleGenerativeAIFetchError(`Error fetching from ${url.toString()}: [${response.status} ${response.statusText}] ${message}`, response.status, response.statusText, errorDetails);
    }
  } catch (e) {
    let err = e;
    if (!(e instanceof GoogleGenerativeAIFetchError || e instanceof GoogleGenerativeAIRequestInputError)) {
      err = new GoogleGenerativeAIError(`Error fetching from ${url.toString()}: ${e.message}`);
      err.stack = e.stack;
    }
    throw err;
  }
  return response;
}
function buildFetchOptions(requestOptions) {
  const fetchOptions = {};
  if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {
    const abortController = new AbortController();
    const signal = abortController.signal;
    setTimeout(() => abortController.abort(), requestOptions.timeout);
    fetchOptions.signal = signal;
  }
  return fetchOptions;
}
function addHelpers(response) {
  response.text = () => {
    if (response.candidates && response.candidates.length > 0) {
      if (response.candidates.length > 1) {
        console.warn(`This response had ${response.candidates.length} candidates. Returning text from the first candidate only. Access response.candidates directly to use the other candidates.`);
      }
      if (hadBadFinishReason(response.candidates[0])) {
        throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);
      }
      return getText(response);
    } else if (response.promptFeedback) {
      throw new GoogleGenerativeAIResponseError(`Text not available. ${formatBlockErrorMessage(response)}`, response);
    }
    return "";
  };
  response.functionCall = () => {
    if (response.candidates && response.candidates.length > 0) {
      if (response.candidates.length > 1) {
        console.warn(`This response had ${response.candidates.length} candidates. Returning function calls from the first candidate only. Access response.candidates directly to use the other candidates.`);
      }
      if (hadBadFinishReason(response.candidates[0])) {
        throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);
      }
      console.warn(`response.functionCall() is deprecated. Use response.functionCalls() instead.`);
      return getFunctionCalls(response)[0];
    } else if (response.promptFeedback) {
      throw new GoogleGenerativeAIResponseError(`Function call not available. ${formatBlockErrorMessage(response)}`, response);
    }
    return void 0;
  };
  response.functionCalls = () => {
    if (response.candidates && response.candidates.length > 0) {
      if (response.candidates.length > 1) {
        console.warn(`This response had ${response.candidates.length} candidates. Returning function calls from the first candidate only. Access response.candidates directly to use the other candidates.`);
      }
      if (hadBadFinishReason(response.candidates[0])) {
        throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);
      }
      return getFunctionCalls(response);
    } else if (response.promptFeedback) {
      throw new GoogleGenerativeAIResponseError(`Function call not available. ${formatBlockErrorMessage(response)}`, response);
    }
    return void 0;
  };
  return response;
}
function getText(response) {
  var _a, _b, _c, _d;
  const textStrings = [];
  if ((_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) {
    for (const part of (_d = (_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0].content) === null || _d === void 0 ? void 0 : _d.parts) {
      if (part.text) {
        textStrings.push(part.text);
      }
    }
  }
  if (textStrings.length > 0) {
    return textStrings.join("");
  } else {
    return "";
  }
}
function getFunctionCalls(response) {
  var _a, _b, _c, _d;
  const functionCalls = [];
  if ((_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) {
    for (const part of (_d = (_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0].content) === null || _d === void 0 ? void 0 : _d.parts) {
      if (part.functionCall) {
        functionCalls.push(part.functionCall);
      }
    }
  }
  if (functionCalls.length > 0) {
    return functionCalls;
  } else {
    return void 0;
  }
}
var badFinishReasons = [FinishReason.RECITATION, FinishReason.SAFETY];
function hadBadFinishReason(candidate) {
  return !!candidate.finishReason && badFinishReasons.includes(candidate.finishReason);
}
function formatBlockErrorMessage(response) {
  var _a, _b, _c;
  let message = "";
  if ((!response.candidates || response.candidates.length === 0) && response.promptFeedback) {
    message += "Response was blocked";
    if ((_a = response.promptFeedback) === null || _a === void 0 ? void 0 : _a.blockReason) {
      message += ` due to ${response.promptFeedback.blockReason}`;
    }
    if ((_b = response.promptFeedback) === null || _b === void 0 ? void 0 : _b.blockReasonMessage) {
      message += `: ${response.promptFeedback.blockReasonMessage}`;
    }
  } else if ((_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0]) {
    const firstCandidate = response.candidates[0];
    if (hadBadFinishReason(firstCandidate)) {
      message += `Candidate was blocked due to ${firstCandidate.finishReason}`;
      if (firstCandidate.finishMessage) {
        message += `: ${firstCandidate.finishMessage}`;
      }
    }
  }
  return message;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
var responseLineRE = /^data\: (.*)(?:\n\n|\r\r|\r\n\r\n)/;
function processStream(response) {
  const inputStream = response.body.pipeThrough(new TextDecoderStream("utf8", { fatal: true }));
  const responseStream = getResponseStream(inputStream);
  const [stream1, stream2] = responseStream.tee();
  return {
    stream: generateResponseSequence(stream1),
    response: getResponsePromise(stream2)
  };
}
async function getResponsePromise(stream) {
  const allResponses = [];
  const reader = stream.getReader();
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      return addHelpers(aggregateResponses(allResponses));
    }
    allResponses.push(value);
  }
}
function generateResponseSequence(stream) {
  return __asyncGenerator(this, arguments, function* generateResponseSequence_1() {
    const reader = stream.getReader();
    while (true) {
      const { value, done } = yield __await(reader.read());
      if (done) {
        break;
      }
      yield yield __await(addHelpers(value));
    }
  });
}
function getResponseStream(inputStream) {
  const reader = inputStream.getReader();
  const stream = new ReadableStream({
    start(controller) {
      let currentText = "";
      return pump();
      function pump() {
        return reader.read().then(({ value, done }) => {
          if (done) {
            if (currentText.trim()) {
              controller.error(new GoogleGenerativeAIError("Failed to parse stream"));
              return;
            }
            controller.close();
            return;
          }
          currentText += value;
          let match = currentText.match(responseLineRE);
          let parsedResponse;
          while (match) {
            try {
              parsedResponse = JSON.parse(match[1]);
            } catch (e) {
              controller.error(new GoogleGenerativeAIError(`Error parsing JSON response: "${match[1]}"`));
              return;
            }
            controller.enqueue(parsedResponse);
            currentText = currentText.substring(match[0].length);
            match = currentText.match(responseLineRE);
          }
          return pump();
        });
      }
    }
  });
  return stream;
}
function aggregateResponses(responses) {
  const lastResponse = responses[responses.length - 1];
  const aggregatedResponse = {
    promptFeedback: lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.promptFeedback
  };
  for (const response of responses) {
    if (response.candidates) {
      for (const candidate of response.candidates) {
        const i = candidate.index;
        if (!aggregatedResponse.candidates) {
          aggregatedResponse.candidates = [];
        }
        if (!aggregatedResponse.candidates[i]) {
          aggregatedResponse.candidates[i] = {
            index: candidate.index
          };
        }
        aggregatedResponse.candidates[i].citationMetadata = candidate.citationMetadata;
        aggregatedResponse.candidates[i].finishReason = candidate.finishReason;
        aggregatedResponse.candidates[i].finishMessage = candidate.finishMessage;
        aggregatedResponse.candidates[i].safetyRatings = candidate.safetyRatings;
        if (candidate.content && candidate.content.parts) {
          if (!aggregatedResponse.candidates[i].content) {
            aggregatedResponse.candidates[i].content = {
              role: candidate.content.role || "user",
              parts: []
            };
          }
          const newPart = {};
          for (const part of candidate.content.parts) {
            if (part.text) {
              newPart.text = part.text;
            }
            if (part.functionCall) {
              newPart.functionCall = part.functionCall;
            }
            if (Object.keys(newPart).length === 0) {
              newPart.text = "";
            }
            aggregatedResponse.candidates[i].content.parts.push(newPart);
          }
        }
      }
    }
  }
  return aggregatedResponse;
}
async function generateContentStream(apiKey, model, params, requestOptions) {
  const response = await makeRequest(
    model,
    Task.STREAM_GENERATE_CONTENT,
    apiKey,
    /* stream */
    true,
    JSON.stringify(params),
    requestOptions
  );
  return processStream(response);
}
async function generateContent(apiKey, model, params, requestOptions) {
  const response = await makeRequest(
    model,
    Task.GENERATE_CONTENT,
    apiKey,
    /* stream */
    false,
    JSON.stringify(params),
    requestOptions
  );
  const responseJson = await response.json();
  const enhancedResponse = addHelpers(responseJson);
  return {
    response: enhancedResponse
  };
}
function formatSystemInstruction(input) {
  if (input == null) {
    return void 0;
  } else if (typeof input === "string") {
    return { role: "system", parts: [{ text: input }] };
  } else if (input.text) {
    return { role: "system", parts: [input] };
  } else if (input.parts) {
    if (!input.role) {
      return { role: "system", parts: input.parts };
    } else {
      return input;
    }
  }
}
function formatNewContent(request) {
  let newParts = [];
  if (typeof request === "string") {
    newParts = [{ text: request }];
  } else {
    for (const partOrString of request) {
      if (typeof partOrString === "string") {
        newParts.push({ text: partOrString });
      } else {
        newParts.push(partOrString);
      }
    }
  }
  return assignRoleToPartsAndValidateSendMessageRequest(newParts);
}
function assignRoleToPartsAndValidateSendMessageRequest(parts) {
  const userContent = { role: "user", parts: [] };
  const functionContent = { role: "function", parts: [] };
  let hasUserContent = false;
  let hasFunctionContent = false;
  for (const part of parts) {
    if ("functionResponse" in part) {
      functionContent.parts.push(part);
      hasFunctionContent = true;
    } else {
      userContent.parts.push(part);
      hasUserContent = true;
    }
  }
  if (hasUserContent && hasFunctionContent) {
    throw new GoogleGenerativeAIError("Within a single message, FunctionResponse cannot be mixed with other type of part in the request for sending chat message.");
  }
  if (!hasUserContent && !hasFunctionContent) {
    throw new GoogleGenerativeAIError("No content is provided for sending chat message.");
  }
  if (hasUserContent) {
    return userContent;
  }
  return functionContent;
}
function formatGenerateContentInput(params) {
  let formattedRequest;
  if (params.contents) {
    formattedRequest = params;
  } else {
    const content = formatNewContent(params);
    formattedRequest = { contents: [content] };
  }
  if (params.systemInstruction) {
    formattedRequest.systemInstruction = formatSystemInstruction(params.systemInstruction);
  }
  return formattedRequest;
}
function formatEmbedContentInput(params) {
  if (typeof params === "string" || Array.isArray(params)) {
    const content = formatNewContent(params);
    return { content };
  }
  return params;
}
var VALID_PART_FIELDS = [
  "text",
  "inlineData",
  "functionCall",
  "functionResponse"
];
var VALID_PARTS_PER_ROLE = {
  user: ["text", "inlineData"],
  function: ["functionResponse"],
  model: ["text", "functionCall"],
  // System instructions shouldn't be in history anyway.
  system: ["text"]
};
function validateChatHistory(history) {
  let prevContent = false;
  for (const currContent of history) {
    const { role, parts } = currContent;
    if (!prevContent && role !== "user") {
      throw new GoogleGenerativeAIError(`First content should be with role 'user', got ${role}`);
    }
    if (!POSSIBLE_ROLES.includes(role)) {
      throw new GoogleGenerativeAIError(`Each item should include role field. Got ${role} but valid roles are: ${JSON.stringify(POSSIBLE_ROLES)}`);
    }
    if (!Array.isArray(parts)) {
      throw new GoogleGenerativeAIError("Content should have 'parts' property with an array of Parts");
    }
    if (parts.length === 0) {
      throw new GoogleGenerativeAIError("Each Content should have at least one part");
    }
    const countFields = {
      text: 0,
      inlineData: 0,
      functionCall: 0,
      functionResponse: 0,
      fileData: 0
    };
    for (const part of parts) {
      for (const key of VALID_PART_FIELDS) {
        if (key in part) {
          countFields[key] += 1;
        }
      }
    }
    const validParts = VALID_PARTS_PER_ROLE[role];
    for (const key of VALID_PART_FIELDS) {
      if (!validParts.includes(key) && countFields[key] > 0) {
        throw new GoogleGenerativeAIError(`Content with role '${role}' can't contain '${key}' part`);
      }
    }
    prevContent = true;
  }
}
var SILENT_ERROR = "SILENT_ERROR";
var ChatSession = class {
  constructor(apiKey, model, params, requestOptions) {
    this.model = model;
    this.params = params;
    this.requestOptions = requestOptions;
    this._history = [];
    this._sendPromise = Promise.resolve();
    this._apiKey = apiKey;
    if (params === null || params === void 0 ? void 0 : params.history) {
      validateChatHistory(params.history);
      this._history = params.history;
    }
  }
  /**
   * Gets the chat history so far. Blocked prompts are not added to history.
   * Blocked candidates are not added to history, nor are the prompts that
   * generated them.
   */
  async getHistory() {
    await this._sendPromise;
    return this._history;
  }
  /**
   * Sends a chat message and receives a non-streaming
   * {@link GenerateContentResult}
   */
  async sendMessage(request) {
    var _a, _b, _c, _d, _e;
    await this._sendPromise;
    const newContent = formatNewContent(request);
    const generateContentRequest = {
      safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,
      generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,
      tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,
      toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,
      systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,
      contents: [...this._history, newContent]
    };
    let finalResult;
    this._sendPromise = this._sendPromise.then(() => generateContent(this._apiKey, this.model, generateContentRequest, this.requestOptions)).then((result) => {
      var _a2;
      if (result.response.candidates && result.response.candidates.length > 0) {
        this._history.push(newContent);
        const responseContent = Object.assign({
          parts: [],
          // Response seems to come back without a role set.
          role: "model"
        }, (_a2 = result.response.candidates) === null || _a2 === void 0 ? void 0 : _a2[0].content);
        this._history.push(responseContent);
      } else {
        const blockErrorMessage = formatBlockErrorMessage(result.response);
        if (blockErrorMessage) {
          console.warn(`sendMessage() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);
        }
      }
      finalResult = result;
    });
    await this._sendPromise;
    return finalResult;
  }
  /**
   * Sends a chat message and receives the response as a
   * {@link GenerateContentStreamResult} containing an iterable stream
   * and a response promise.
   */
  async sendMessageStream(request) {
    var _a, _b, _c, _d, _e;
    await this._sendPromise;
    const newContent = formatNewContent(request);
    const generateContentRequest = {
      safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,
      generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,
      tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,
      toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,
      systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,
      contents: [...this._history, newContent]
    };
    const streamPromise = generateContentStream(this._apiKey, this.model, generateContentRequest, this.requestOptions);
    this._sendPromise = this._sendPromise.then(() => streamPromise).catch((_ignored) => {
      throw new Error(SILENT_ERROR);
    }).then((streamResult) => streamResult.response).then((response) => {
      if (response.candidates && response.candidates.length > 0) {
        this._history.push(newContent);
        const responseContent = Object.assign({}, response.candidates[0].content);
        if (!responseContent.role) {
          responseContent.role = "model";
        }
        this._history.push(responseContent);
      } else {
        const blockErrorMessage = formatBlockErrorMessage(response);
        if (blockErrorMessage) {
          console.warn(`sendMessageStream() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);
        }
      }
    }).catch((e) => {
      if (e.message !== SILENT_ERROR) {
        console.error(e);
      }
    });
    return streamPromise;
  }
};
async function countTokens(apiKey, model, params, requestOptions) {
  const response = await makeRequest(model, Task.COUNT_TOKENS, apiKey, false, JSON.stringify(Object.assign(Object.assign({}, params), { model })), requestOptions);
  return response.json();
}
async function embedContent(apiKey, model, params, requestOptions) {
  const response = await makeRequest(model, Task.EMBED_CONTENT, apiKey, false, JSON.stringify(params), requestOptions);
  return response.json();
}
async function batchEmbedContents(apiKey, model, params, requestOptions) {
  const requestsWithModel = params.requests.map((request) => {
    return Object.assign(Object.assign({}, request), { model });
  });
  const response = await makeRequest(model, Task.BATCH_EMBED_CONTENTS, apiKey, false, JSON.stringify({ requests: requestsWithModel }), requestOptions);
  return response.json();
}
var GenerativeModel = class {
  constructor(apiKey, modelParams, requestOptions) {
    this.apiKey = apiKey;
    if (modelParams.model.includes("/")) {
      this.model = modelParams.model;
    } else {
      this.model = `models/${modelParams.model}`;
    }
    this.generationConfig = modelParams.generationConfig || {};
    this.safetySettings = modelParams.safetySettings || [];
    this.tools = modelParams.tools;
    this.toolConfig = modelParams.toolConfig;
    this.systemInstruction = formatSystemInstruction(modelParams.systemInstruction);
    this.requestOptions = requestOptions || {};
  }
  /**
   * Makes a single non-streaming call to the model
   * and returns an object containing a single {@link GenerateContentResponse}.
   */
  async generateContent(request) {
    const formattedParams = formatGenerateContentInput(request);
    return generateContent(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction }, formattedParams), this.requestOptions);
  }
  /**
   * Makes a single streaming call to the model
   * and returns an object containing an iterable stream that iterates
   * over all chunks in the streaming response as well as
   * a promise that returns the final aggregated response.
   */
  async generateContentStream(request) {
    const formattedParams = formatGenerateContentInput(request);
    return generateContentStream(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction }, formattedParams), this.requestOptions);
  }
  /**
   * Gets a new {@link ChatSession} instance which can be used for
   * multi-turn chats.
   */
  startChat(startChatParams) {
    return new ChatSession(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction }, startChatParams), this.requestOptions);
  }
  /**
   * Counts the tokens in the provided request.
   */
  async countTokens(request) {
    const formattedParams = formatGenerateContentInput(request);
    return countTokens(this.apiKey, this.model, formattedParams, this.requestOptions);
  }
  /**
   * Embeds the provided content.
   */
  async embedContent(request) {
    const formattedParams = formatEmbedContentInput(request);
    return embedContent(this.apiKey, this.model, formattedParams, this.requestOptions);
  }
  /**
   * Embeds an array of {@link EmbedContentRequest}s.
   */
  async batchEmbedContents(batchEmbedContentRequest) {
    return batchEmbedContents(this.apiKey, this.model, batchEmbedContentRequest, this.requestOptions);
  }
};
var GoogleGenerativeAI = class {
  constructor(apiKey) {
    this.apiKey = apiKey;
  }
  /**
   * Gets a {@link GenerativeModel} instance for the provided model name.
   */
  getGenerativeModel(modelParams, requestOptions) {
    if (!modelParams.model) {
      throw new GoogleGenerativeAIError(`Must provide a model name. Example: genai.getGenerativeModel({ model: 'my-model-name' })`);
    }
    return new GenerativeModel(this.apiKey, modelParams, requestOptions);
  }
};

// src/GeminiChat.ts
var import_obsidian3 = require("obsidian");
var _API_KEY, _model, _session;
var GeminiChat = class {
  constructor(plugin, app2) {
    __privateAdd(this, _API_KEY, void 0);
    __privateAdd(this, _model, void 0);
    __privateAdd(this, _session, void 0);
    __privateSet(this, _API_KEY, plugin.settings.Gemini_Api_Key);
    __privateSet(this, _model, new GoogleGenerativeAI(__privateGet(this, _API_KEY)).getGenerativeModel({ model: "gemini-1.5-flash" }));
    __privateSet(this, _session, __privateGet(this, _model).startChat());
    this.app = app2;
    this.messages = [];
    this.chatName = "Untitled Gemini Chat";
  }
  async sendUserMessage(text) {
    const userMessage = new ChatMessage(text, true);
    this.messages.push(userMessage);
    const result = await __privateGet(this, _session).sendMessage(userMessage.text);
    const modelMessage = new ChatMessage(result.response.text(), false);
    this.messages.push(modelMessage);
    return modelMessage;
  }
  compileHistory() {
    let history = this.messages.map((message) => {
      return {
        role: message.user ? "user" : "model",
        parts: message.text
      };
    });
    return JSON.stringify(this.messages);
  }
  async saveHistory(chatName) {
    const history = JSON.stringify(this.messages);
    const filePath = `ChatHistory/${chatName}.gemini`;
    await this.app.vault.adapter.write(filePath, history);
  }
  async loadHistoryFromFile(file) {
    try {
      console.log(`Creating chat from: ${file}`);
      let f = file;
      if (f instanceof import_obsidian3.TFile) {
        this.chatName = f.basename;
      } else {
        throw new Error(`Path Error for: ${file.path}`);
      }
      let history = await this.app.vault.adapter.read(file.path);
      this.messages = JSON.parse(history).map((msg) => new ChatMessage(msg.text, msg.user));
      let h = this.messages.map((message) => {
        return {
          role: message.user ? "user" : "model",
          parts: [{ text: message.text }]
        };
      });
      __privateSet(this, _session, await __privateGet(this, _model).startChat({ history: h }));
    } catch (error2) {
      console.log("No previous chat history found, starting fresh.");
      this.messages = [];
    }
  }
};
_API_KEY = new WeakMap();
_model = new WeakMap();
_session = new WeakMap();
var ChatMessage = class {
  constructor(text, user) {
    this.text = text;
    this.user = user;
  }
};

// src/Components/ChatComponent.ts
var ChatComponent = class {
  constructor(parentElement, App6, Plugin3) {
    this.newMessageListeners = [];
    this.parentElement = parentElement;
    this.GeminiChat = new GeminiChat(Plugin3, App6);
    this.App = App6;
    this.Plugin = Plugin3;
    this.initializeChatUI();
  }
  initializeChatUI() {
    this.chatDisplay = this.parentElement.createDiv({ cls: "gemini-chat-display" });
    this.messagesContainer = this.chatDisplay.createDiv({ cls: "messages-container" });
    const inputContainer = this.chatDisplay.createDiv({ cls: "input-container" });
    this.chatInput = inputContainer.createEl("input", {
      type: "text",
      cls: "gemini-chat-input"
    });
    this.chatInput.placeholder = "Ask Gemini...";
    this.sendButton = inputContainer.createEl("button", {
      text: "Send",
      cls: "send-button"
    });
    this.sendButton.addEventListener("click", () => this.handleChatInput());
    this.chatInput.placeholder = "Ask Gemini...";
    this.chatInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        this.handleChatInput();
      }
    });
  }
  loadChat(GeminiChat2) {
    this.GeminiChat = GeminiChat2;
    GeminiChat2.messages.forEach((element) => {
      this.displayMessage(element.text, element.user);
    });
  }
  async handleChatInput() {
    const userInput = this.chatInput.value;
    if (userInput == "")
      return;
    this.displayMessage(userInput, true);
    this.chatInput.value = "";
    this.showTypingAnimation();
    const aiResponse = await this.GeminiChat.sendUserMessage(userInput);
    this.displayMessage(aiResponse.text, false);
    this.hideTypingAnimation();
  }
  showTypingAnimation() {
    const typingIndicator = document.createElement("div");
    typingIndicator.className = "typing-indicator";
    this.messagesContainer.prepend(typingIndicator);
    typingIndicator.createSpan({});
    typingIndicator.createSpan({});
    typingIndicator.createSpan({});
  }
  hideTypingAnimation() {
    const typingIndicator = this.chatDisplay.querySelector(".typing-indicator");
    if (typingIndicator) {
      typingIndicator.remove();
    }
  }
  displayMessage(text, user) {
    new ChatMessageComponent(text, user, this.messagesContainer, this.App, this.Plugin);
    this.notifyMessageListeners();
  }
  scrollToBottom() {
    this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
  }
  focusInput() {
    this.scrollToBottom();
    this.chatInput.focus();
  }
  addListener(listener) {
    this.newMessageListeners.push(listener);
  }
  notifyMessageListeners() {
    this.newMessageListeners.forEach((listener) => listener(this.GeminiChat.compileHistory()));
  }
  reset() {
    this.messagesContainer.empty();
  }
};

// src/Views/GeminiChatView.ts
var import_console = require("console");
var VIEW_TYPE_GEMINI_CHAT = "gemini-chat-view";
var GeminiChatView = class extends import_obsidian4.FileView {
  constructor(leaf, app2, plugin) {
    super(leaf);
    this.app = app2;
    this.plugin = plugin;
    this.file = null;
    this.contentEl.empty();
    this.contentEl.style.display = "flex";
    this.contentEl.style.flexDirection = "column";
    this.chatComponent = new ChatComponent(this.contentEl, app2, plugin);
    this.chatComponent.addListener(this.updateHistory.bind(this));
  }
  initialiseUI() {
    if (!this.file)
      return;
    this.contentEl.empty();
    this.contentEl.style.display = "flex";
    this.contentEl.style.flexDirection = "column";
    this.titleElement = this.contentEl.createEl("textarea", {
      text: "New Chat",
      cls: "chat-title-text"
    });
    this.titleElement.rows = 1;
    this.titleElement.maxLength = 200;
    this.titleElement.setText(this.file.basename);
    this.titleElement.addEventListener("input", (event) => {
      this.titleElement.style.height = "auto";
      this.titleElement.style.height = this.titleElement.scrollHeight + "px";
    });
    this.titleElement.addEventListener("keydown", (ev) => {
      var _a;
      if (ev.key == "Enter") {
        this.titleElement.blur();
        if (this.file && this.titleElement.textContent) {
          let filepath = (_a = this.file) == null ? void 0 : _a.path.replace(this.file.basename, this.titleElement.value);
          console.log("renaming " + filepath);
          this.app.vault.rename(this.file, filepath);
        }
      }
    });
    let topBar = this.contentEl.createDiv({ cls: "chat-top-bar" });
    this.chatComponent = new ChatComponent(this.contentEl, app, this.plugin);
    this.chatComponent.addListener(this.updateHistory.bind(this));
  }
  updateHistory(history) {
    if (this.file) {
      this.app.vault.adapter.write(this.file.path, history);
    } else {
      throw (0, import_console.error)("Can't sync history, file is null");
    }
  }
  async onLoadFile(file) {
    this.chatComponent.reset();
    this.file = file;
    this.initialiseUI();
    let chat = new GeminiChat(this.plugin, this.app);
    await chat.loadHistoryFromFile(file);
    this.chatComponent.loadChat(chat);
    if (this.chatComponent.GeminiChat.messages.length == 0) {
      this.titleElement.focus();
      this.titleElement.select();
    } else {
      this.chatComponent.focusInput();
    }
  }
  getViewType() {
    return VIEW_TYPE_GEMINI_CHAT;
  }
  canAcceptExtension(extension) {
    return extension == "gemini";
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  Gemini_Api_Key: "",
  DeveloperMode: false,
  DefaultSavePath: "Gemini Chats"
};
var GeminiPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingsTab(this.app, this));
    this.registerView(
      VIEW_TYPE_GEMINI_CHAT,
      (leaf) => {
        return new GeminiChatView(leaf, this.app, this);
      }
    );
    this.registerExtensions(["gemini"], VIEW_TYPE_GEMINI_CHAT);
    this.registerEvent(this.app.workspace.on("file-open", (file) => {
      if ((file == null ? void 0 : file.extension) == "gemini") {
        this.activateChatView(file);
      }
    }));
    this.addRibbonIcon("sparkles", "New Gemini Chat", () => {
      this.newChatView();
    });
    this.addCommand({
      id: "gemini-new-chat",
      name: "New Gemini Chat",
      callback: () => {
        this.newChatView();
      }
    });
    this.addCommand({
      id: "gemini-open-chat",
      name: "Open Gemini Chat",
      callback: () => {
        new OpenChatModal(this.app, (file) => {
          this.app.workspace.getLeaf(false).openFile(file);
        }).open();
      }
    });
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_GEMINI_CHAT);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateChatView(file) {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_GEMINI_CHAT).filter((leaf2) => {
      if (leaf2.view instanceof import_obsidian5.FileView) {
        const view = leaf2.view;
        if (view.file == file) {
          return true;
        }
      }
      return false;
    });
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getLeaf(false);
      await leaf.setViewState({ type: VIEW_TYPE_GEMINI_CHAT, active: true });
    }
    if (leaf) {
      workspace.setActiveLeaf(leaf);
    }
  }
  async newChatView() {
    let path = `${this.settings.DefaultSavePath}`;
    if (!path.endsWith("/"))
      path += "/";
    if (this.settings.DefaultSavePath == "")
      path = "";
    this.app.vault.adapter.mkdir(path.endsWith("/") ? path.slice(0, -1) : path);
    let name = "New Chat.gemini";
    let index = 0;
    while (this.app.vault.getAbstractFileByPath(path + name) != null) {
      index += 1;
      name = `New Chat ${index}.gemini`;
      if (index >= 100) {
        new import_obsidian5.Notice("Failed to create a new chat");
        return;
      }
    }
    console.log(`new chat: ${path + name}`);
    let file = await this.app.vault.create(path + name, "");
    await this.app.workspace.getLeaf(false).openFile(file);
  }
};
var SettingsTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian5.Setting(containerEl).setName("Gemini API Key").addText((text) => text.setPlaceholder("Your API key here").setValue(this.plugin.settings.Gemini_Api_Key).onChange(async (value) => {
      this.plugin.settings.Gemini_Api_Key = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Developer mode").setDesc("Fakes the sending of requests, leave this off unless you want fake answers for some reason...").addToggle((value) => value.setValue(this.plugin.settings.DeveloperMode).onChange(async (value2) => {
      this.plugin.settings.DeveloperMode = value2;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Default File Path").setDesc("The default folder for saved Gemini Chats. Leave empty to have new chats appear at vault root.").addText(
      (text) => text.setPlaceholder("Folder path").setValue(this.plugin.settings.DefaultSavePath).onChange(async (value) => {
        this.plugin.settings.DefaultSavePath = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
/*! Bundled license information:

@google/generative-ai/dist/index.mjs:
  (**
   * @license
   * Copyright 2024 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@google/generative-ai/dist/index.mjs:
  (**
   * @license
   * Copyright 2024 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvTW9kYWxzL09wZW5DaGF0TW9kYWwudHMiLCAic3JjL1ZpZXdzL0dlbWluaUNoYXRWaWV3LnRzIiwgInNyYy9Db21wb25lbnRzL0NoYXRNZXNzYWdlQ29tcG9uZW50LnRzIiwgIm5vZGVfbW9kdWxlcy9AZ29vZ2xlL2dlbmVyYXRpdmUtYWkvZGlzdC9pbmRleC5tanMiLCAic3JjL0dlbWluaUNoYXQudHMiLCAic3JjL0NvbXBvbmVudHMvQ2hhdENvbXBvbmVudC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIEZpbGVWaWV3LCBNYXJrZG93blZpZXcsIE1vZGFsLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgVEZpbGUsIFZhdWx0LCBWaWV3LCBWaWV3U3RhdGUsIFdvcmtzcGFjZUxlYWYsIGFkZEljb24sIGxvYWRNZXJtYWlkIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgT3BlbkNoYXRNb2RhbCB9IGZyb20gJ3NyYy9Nb2RhbHMvT3BlbkNoYXRNb2RhbCc7XG5pbXBvcnQgeyBHZW1pbmlDaGF0VmlldywgVklFV19UWVBFX0dFTUlOSV9DSEFUIH0gZnJvbSAnc3JjL1ZpZXdzL0dlbWluaUNoYXRWaWV3JztcblxuaW50ZXJmYWNlIEdlbWluaVBsdWdpblNldHRpbmdzIHtcblx0R2VtaW5pX0FwaV9LZXk6IHN0cmluZztcblx0RGV2ZWxvcGVyTW9kZTogYm9vbGVhbjtcblx0RGVmYXVsdFNhdmVQYXRoOiBzdHJpbmc7XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IEdlbWluaVBsdWdpblNldHRpbmdzID0ge1xuXHRHZW1pbmlfQXBpX0tleTogXCJcIixcblx0RGV2ZWxvcGVyTW9kZTogZmFsc2UsXG5cdERlZmF1bHRTYXZlUGF0aDogXCJHZW1pbmkgQ2hhdHNcIlxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZW1pbmlQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogR2VtaW5pUGx1Z2luU2V0dGluZ3M7XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTZXR0aW5nc1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXG5cdFx0dGhpcy5yZWdpc3RlclZpZXcoXG5cdFx0XHRWSUVXX1RZUEVfR0VNSU5JX0NIQVQsXG5cdFx0XHQobGVhZikgPT4ge1xuXHRcdFx0XHRyZXR1cm4gbmV3IEdlbWluaUNoYXRWaWV3KGxlYWYsIHRoaXMuYXBwLCB0aGlzKTtcblx0XHRcdH1cblx0XHQpO1xuXHRcdHRoaXMucmVnaXN0ZXJFeHRlbnNpb25zKFtcImdlbWluaVwiXSwgVklFV19UWVBFX0dFTUlOSV9DSEFUKTtcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAud29ya3NwYWNlLm9uKFwiZmlsZS1vcGVuXCIsIChmaWxlKSA9PiB7XG5cdFx0XHRpZiAoZmlsZT8uZXh0ZW5zaW9uID09IFwiZ2VtaW5pXCIpIHtcblx0XHRcdFx0dGhpcy5hY3RpdmF0ZUNoYXRWaWV3KGZpbGUpO1xuXHRcdFx0fVxuXHRcdH0pKVxuXHRcdHRoaXMuYWRkUmliYm9uSWNvbihcInNwYXJrbGVzXCIsIFwiTmV3IEdlbWluaSBDaGF0XCIsICgpID0+IHsgdGhpcy5uZXdDaGF0VmlldygpIH0pO1xuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ2dlbWluaS1uZXctY2hhdCcsXG5cdFx0XHRuYW1lOiAnTmV3IEdlbWluaSBDaGF0Jyxcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7IHRoaXMubmV3Q2hhdFZpZXcoKSB9LFxuXHRcdH0pXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnZ2VtaW5pLW9wZW4tY2hhdCcsXG5cdFx0XHRuYW1lOiAnT3BlbiBHZW1pbmkgQ2hhdCcsXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xuXHRcdFx0XHRuZXcgT3BlbkNoYXRNb2RhbCh0aGlzLmFwcCwgKGZpbGU6IFRGaWxlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoZmFsc2UpLm9wZW5GaWxlKGZpbGUpO1xuXHRcdFx0XHR9KS5vcGVuKClcblx0XHRcdH1cblx0XHR9KVxuXG5cdH1cblxuXHRhc3luYyBvbnVubG9hZCgpIHtcblx0XHR0aGlzLmFwcC53b3Jrc3BhY2UuZGV0YWNoTGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9HRU1JTklfQ0hBVCk7XG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9XG5cblx0YXN5bmMgYWN0aXZhdGVDaGF0VmlldyhmaWxlOiBURmlsZSkge1xuXHRcdGNvbnN0IHsgd29ya3NwYWNlIH0gPSB0aGlzLmFwcDtcblxuXHRcdGxldCBsZWFmOiBXb3Jrc3BhY2VMZWFmIHwgbnVsbCA9IG51bGw7XG5cdFx0Y29uc3QgbGVhdmVzID0gd29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfR0VNSU5JX0NIQVQpLmZpbHRlcigobGVhZikgPT4ge1xuXHRcdFx0aWYgKGxlYWYudmlldyBpbnN0YW5jZW9mIEZpbGVWaWV3KSB7XG5cdFx0XHRcdGNvbnN0IHZpZXcgPSBsZWFmLnZpZXcgYXMgRmlsZVZpZXc7XG5cblx0XHRcdFx0aWYgKHZpZXcuZmlsZSA9PSBmaWxlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9KTtcblxuXHRcdGlmIChsZWF2ZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0bGVhZiA9IGxlYXZlc1swXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGVhZiA9IHdvcmtzcGFjZS5nZXRMZWFmKGZhbHNlKTtcblx0XHRcdGF3YWl0IGxlYWYuc2V0Vmlld1N0YXRlKHsgdHlwZTogVklFV19UWVBFX0dFTUlOSV9DSEFULCBhY3RpdmU6IHRydWUgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKGxlYWYpIHtcblx0XHRcdHdvcmtzcGFjZS5zZXRBY3RpdmVMZWFmKGxlYWYpO1xuXHRcdH1cblx0fVxuXG5cdGFzeW5jIG5ld0NoYXRWaWV3KCkge1xuXHRcdGxldCBwYXRoID0gYCR7dGhpcy5zZXR0aW5ncy5EZWZhdWx0U2F2ZVBhdGh9YDtcblx0XHRpZiAoIXBhdGguZW5kc1dpdGgoXCIvXCIpKSBwYXRoICs9IFwiL1wiO1xuXHRcdGlmICh0aGlzLnNldHRpbmdzLkRlZmF1bHRTYXZlUGF0aCA9PSBcIlwiKSBwYXRoID0gXCJcIjtcblxuXHRcdHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIubWtkaXIocGF0aC5lbmRzV2l0aCgnLycpID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoKTtcblx0XHRsZXQgbmFtZSA9IFwiTmV3IENoYXQuZ2VtaW5pXCI7XG5cblx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdHdoaWxlICh0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocGF0aCArIG5hbWUpICE9IG51bGwpIHtcblx0XHRcdGluZGV4ICs9IDE7XG5cdFx0XHRuYW1lID0gYE5ldyBDaGF0ICR7aW5kZXh9LmdlbWluaWA7XG5cblx0XHRcdGlmIChpbmRleCA+PSAxMDApIHtcblx0XHRcdFx0Ly8gRXhpdCBjb25kaXRpb24gdG8gYXZvaWQgaW5maW5pdGUgbG9vcFxuXHRcdFx0XHRuZXcgTm90aWNlKFwiRmFpbGVkIHRvIGNyZWF0ZSBhIG5ldyBjaGF0XCIpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y29uc29sZS5sb2coYG5ldyBjaGF0OiAke3BhdGggKyBuYW1lfWApXG5cdFx0bGV0IGZpbGUgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGUocGF0aCArIG5hbWUsIFwiXCIpO1xuXHRcdGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKGZhbHNlKS5vcGVuRmlsZShmaWxlKTtcblx0fVxufVxuXG5jbGFzcyBTZXR0aW5nc1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuXHRwbHVnaW46IEdlbWluaVBsdWdpbjtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBHZW1pbmlQbHVnaW4pIHtcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cblxuXHRkaXNwbGF5KCk6IHZvaWQge1xuXHRcdGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShcIkdlbWluaSBBUEkgS2V5XCIpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiWW91ciBBUEkga2V5IGhlcmVcIilcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLkdlbWluaV9BcGlfS2V5KVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuR2VtaW5pX0FwaV9LZXkgPSB2YWx1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0fSkpXG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKFwiRGV2ZWxvcGVyIG1vZGVcIilcblx0XHRcdC5zZXREZXNjKFwiRmFrZXMgdGhlIHNlbmRpbmcgb2YgcmVxdWVzdHMsIGxlYXZlIHRoaXMgb2ZmIHVubGVzcyB5b3Ugd2FudCBmYWtlIGFuc3dlcnMgZm9yIHNvbWUgcmVhc29uLi4uXCIpXG5cdFx0XHQuYWRkVG9nZ2xlKHZhbHVlID0+IHZhbHVlXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5EZXZlbG9wZXJNb2RlKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuRGV2ZWxvcGVyTW9kZSA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSlcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJEZWZhdWx0IEZpbGUgUGF0aFwiKVxuXHRcdFx0LnNldERlc2MoXCJUaGUgZGVmYXVsdCBmb2xkZXIgZm9yIHNhdmVkIEdlbWluaSBDaGF0cy4gTGVhdmUgZW1wdHkgdG8gaGF2ZSBuZXcgY2hhdHMgYXBwZWFyIGF0IHZhdWx0IHJvb3QuXCIpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiRm9sZGVyIHBhdGhcIilcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLkRlZmF1bHRTYXZlUGF0aClcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLkRlZmF1bHRTYXZlUGF0aCA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KVxuXG5cdFx0XHQpXG5cblx0fVxufVxuIiwgImltcG9ydCB7IEFwcCwgRnV6enlTdWdnZXN0TW9kYWwsIFN1Z2dlc3RNb2RhbCwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuZXhwb3J0IGNsYXNzIE9wZW5DaGF0TW9kYWwgZXh0ZW5kcyBGdXp6eVN1Z2dlc3RNb2RhbDxURmlsZT4ge1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHByb3RlY3RlZCBvblNlbGVjdGVkOiAoZmlsZTogVEZpbGUpID0+IHZvaWQpIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICB9XG4gICAgZ2V0SXRlbXMoKTogVEZpbGVbXSB7XG4gICAgICAgIHJldHVybiBhcHAudmF1bHQuZ2V0RmlsZXMoKS5maWx0ZXIoZmlsZSA9PiBmaWxlLmV4dGVuc2lvbiA9PSBcImdlbWluaVwiKVxuICAgIH1cbiAgICBnZXRJdGVtVGV4dChpdGVtOiBURmlsZSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBpdGVtLnBhdGgucmVwbGFjZShcIi5nZW1pbmlcIiwgXCJcIik7XG4gICAgfVxuICAgIG9uQ2hvb3NlSXRlbShpdGVtOiBURmlsZSwgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLm9uU2VsZWN0ZWQoaXRlbSk7XG4gICAgfVxufSIsICJpbXBvcnQgR2VtaW5pUGx1Z2luIGZyb20gJ21haW4nO1xuaW1wb3J0IHsgVGV4dEZpbGVWaWV3LCBXb3Jrc3BhY2VMZWFmLCBURmlsZSwgQXBwLCBGaWxlVmlldywgSXRlbVZpZXcsIE1hcmtkb3duVmlldywgbG9hZE1lcm1haWQgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBDaGF0Q29tcG9uZW50IH0gZnJvbSAnLi4vQ29tcG9uZW50cy9DaGF0Q29tcG9uZW50JztcbmltcG9ydCB7IEdlbWluaUNoYXQgfSBmcm9tICcuLi9HZW1pbmlDaGF0JztcbmltcG9ydCB7IGVycm9yIH0gZnJvbSAnY29uc29sZSc7XG5cbmV4cG9ydCBjb25zdCBWSUVXX1RZUEVfR0VNSU5JX0NIQVQgPSAnZ2VtaW5pLWNoYXQtdmlldyc7XG5cbmV4cG9ydCBjbGFzcyBHZW1pbmlDaGF0VmlldyBleHRlbmRzIEZpbGVWaWV3IHtcblxuICAgIHByaXZhdGUgY2hhdENvbXBvbmVudDogQ2hhdENvbXBvbmVudDtcbiAgICBwcml2YXRlIHBsdWdpbjogR2VtaW5pUGx1Z2luO1xuICAgIGZpbGU6IFRGaWxlIHwgbnVsbDtcbiAgICBwcml2YXRlIHRpdGxlRWxlbWVudDogSFRNTFRleHRBcmVhRWxlbWVudDtcblxuXG4gICAgY29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZiwgYXBwOiBBcHAsIHBsdWdpbjogR2VtaW5pUGx1Z2luKSB7XG4gICAgICAgIHN1cGVyKGxlYWYpO1xuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMuZmlsZSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcblxuICAgICAgICB0aGlzLmNvbnRlbnRFbC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgIHRoaXMuY29udGVudEVsLnN0eWxlLmZsZXhEaXJlY3Rpb24gPSBcImNvbHVtblwiO1xuXG4gICAgICAgIHRoaXMuY2hhdENvbXBvbmVudCA9IG5ldyBDaGF0Q29tcG9uZW50KHRoaXMuY29udGVudEVsLCBhcHAsIHBsdWdpbik7XG4gICAgICAgIHRoaXMuY2hhdENvbXBvbmVudC5hZGRMaXN0ZW5lcih0aGlzLnVwZGF0ZUhpc3RvcnkuYmluZCh0aGlzKSlcblxuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdGlhbGlzZVVJKCkge1xuICAgICAgICBpZiAoIXRoaXMuZmlsZSkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG5cbiAgICAgICAgdGhpcy5jb250ZW50RWwuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgICAgICB0aGlzLmNvbnRlbnRFbC5zdHlsZS5mbGV4RGlyZWN0aW9uID0gXCJjb2x1bW5cIjtcblxuICAgICAgICAvLyBJbml0aWFsaXNlIHRvcCBiYXIgXG4gICAgICAgIHRoaXMudGl0bGVFbGVtZW50ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJ0ZXh0YXJlYVwiLCB7XG4gICAgICAgICAgICB0ZXh0OiBcIk5ldyBDaGF0XCIsXG4gICAgICAgICAgICBjbHM6IFwiY2hhdC10aXRsZS10ZXh0XCJcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLnRpdGxlRWxlbWVudC5yb3dzID0gMTtcbiAgICAgICAgdGhpcy50aXRsZUVsZW1lbnQubWF4TGVuZ3RoID0gMjAwO1xuICAgICAgICB0aGlzLnRpdGxlRWxlbWVudC5zZXRUZXh0KHRoaXMuZmlsZS5iYXNlbmFtZSk7XG5cblxuICAgICAgICB0aGlzLnRpdGxlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBBZGp1c3QgdGhlIGhlaWdodCBvZiB0aGUgdGV4dGFyZWEgZHluYW1pY2FsbHlcbiAgICAgICAgICAgIHRoaXMudGl0bGVFbGVtZW50LnN0eWxlLmhlaWdodCA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgdGhpcy50aXRsZUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gKHRoaXMudGl0bGVFbGVtZW50LnNjcm9sbEhlaWdodCkgKyBcInB4XCI7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRpdGxlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZXYpID0+IHtcbiAgICAgICAgICAgIGlmIChldi5rZXkgPT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50aXRsZUVsZW1lbnQuYmx1cigpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmlsZSAmJiB0aGlzLnRpdGxlRWxlbWVudC50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmlsZXBhdGggPSB0aGlzLmZpbGU/LnBhdGgucmVwbGFjZSh0aGlzLmZpbGUuYmFzZW5hbWUsIHRoaXMudGl0bGVFbGVtZW50LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZW5hbWluZyBcIiArIGZpbGVwYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAudmF1bHQucmVuYW1lKHRoaXMuZmlsZSwgZmlsZXBhdGgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBsZXQgdG9wQmFyID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiBcImNoYXQtdG9wLWJhclwiIH0pO1xuXG4gICAgICAgIHRoaXMuY2hhdENvbXBvbmVudCA9IG5ldyBDaGF0Q29tcG9uZW50KHRoaXMuY29udGVudEVsLCBhcHAsIHRoaXMucGx1Z2luKTtcbiAgICAgICAgdGhpcy5jaGF0Q29tcG9uZW50LmFkZExpc3RlbmVyKHRoaXMudXBkYXRlSGlzdG9yeS5iaW5kKHRoaXMpKVxuICAgIH1cblxuXG4gICAgdXBkYXRlSGlzdG9yeShoaXN0b3J5OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuZmlsZSkge1xuICAgICAgICAgICAgdGhpcy5hcHAudmF1bHQuYWRhcHRlci53cml0ZSh0aGlzLmZpbGUucGF0aCwgaGlzdG9yeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcihcIkNhbid0IHN5bmMgaGlzdG9yeSwgZmlsZSBpcyBudWxsXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgb25Mb2FkRmlsZShmaWxlOiBURmlsZSk6IFByb21pc2U8dm9pZD4ge1xuXG4gICAgICAgIHRoaXMuY2hhdENvbXBvbmVudC5yZXNldCgpO1xuXG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICAgIHRoaXMuaW5pdGlhbGlzZVVJKCk7XG5cbiAgICAgICAgbGV0IGNoYXQgPSBuZXcgR2VtaW5pQ2hhdCh0aGlzLnBsdWdpbiwgdGhpcy5hcHApO1xuICAgICAgICBhd2FpdCBjaGF0LmxvYWRIaXN0b3J5RnJvbUZpbGUoZmlsZSlcblxuICAgICAgICB0aGlzLmNoYXRDb21wb25lbnQubG9hZENoYXQoY2hhdCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY2hhdENvbXBvbmVudC5HZW1pbmlDaGF0Lm1lc3NhZ2VzLmxlbmd0aCA9PSAwKSB7XG5cbiAgICAgICAgICAgIHRoaXMudGl0bGVFbGVtZW50LmZvY3VzKClcbiAgICAgICAgICAgIHRoaXMudGl0bGVFbGVtZW50LnNlbGVjdCgpXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5jaGF0Q29tcG9uZW50LmZvY3VzSW5wdXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBWSUVXX1RZUEVfR0VNSU5JX0NIQVQ7XG4gICAgfVxuXG4gICAgY2FuQWNjZXB0RXh0ZW5zaW9uKGV4dGVuc2lvbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBleHRlbnNpb24gPT0gXCJnZW1pbmlcIjtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgQXBwLCBNYXJrZG93blJlbmRlcmVyLCBQbHVnaW59IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgY2xhc3MgQ2hhdE1lc3NhZ2VDb21wb25lbnQge1xuICAgICN0ZXh0OiBzdHJpbmc7XG4gICAgI1VzZXJNZXNzYWdlOiBib29sZWFuO1xuICAgICNQYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICAjQXBwOiBBcHA7XG4gICAgI1BsdWdpbjogUGx1Z2luO1xuXG4gICAgY29uc3RydWN0b3IodGV4dDogc3RyaW5nLCB1c2VyOiBib29sZWFuLCBwYXJlbnQ6IEhUTUxFbGVtZW50LCBhcHA6QXBwLCBwbHVnaW46UGx1Z2luKSB7XG4gICAgICAgIHRoaXMuI3RleHQgPSB0ZXh0O1xuICAgICAgICB0aGlzLiNVc2VyTWVzc2FnZSA9IHVzZXI7XG4gICAgICAgIHRoaXMuI1BhcmVudEVsZW1lbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuI0FwcCA9IGFwcFxuICAgICAgICB0aGlzLiNQbHVnaW4gPSBwbHVnaW47XG5cbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBtZXNzYWdlIFxuICAgICAgICBjb25zdCBtZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICAvLyBDcmVhdGUgdGhlIGJ1dHRvbiBwYW5lbFxuICAgICAgICBjb25zdCBidXR0b25QYW5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGJ1dHRvblBhbmVsLmFkZENsYXNzKFwibWVzc2FnZS1idXR0b24tcGFuZWxcIilcbiAgICAgICAgYnV0dG9uUGFuZWwuc3R5bGUub3BhY2l0eSA9IFwiMFwiO1xuICAgICAgICAvKlxuICAgICAgICBidXR0b25QYW5lbC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgYnV0dG9uUGFuZWwuc3R5bGUudG9wID0gXCIwXCI7XG4gICAgICAgIGJ1dHRvblBhbmVsLnN0eWxlLnJpZ2h0ID0gXCIwXCI7XG4gICAgICAgIGJ1dHRvblBhbmVsLnN0eWxlLnBhZGRpbmcgPSBcIjVweFwiO1xuICAgICAgICBidXR0b25QYW5lbC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgIGJ1dHRvblBhbmVsLnN0eWxlLmdhcCA9IFwiNXB4XCI7XG4gICAgICAgIGJ1dHRvblBhbmVsLnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcbiAgICAgICAgYnV0dG9uUGFuZWwuc3R5bGUudHJhbnNpdGlvbiA9IFwib3BhY2l0eSAwLjNzIGVhc2UtaW4tb3V0XCI7XG4gICAgICAgICovXG5cblxuICAgICAgICAvLyBDcmVhdGUgdGhlIGNvcHkgYnV0dG9uXG4gICAgICAgIGNvbnN0IGNvcHlCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBjb3B5QnV0dG9uLmFkZENsYXNzKFwibWVzc2FnZS1idXR0b25cIilcbiAgICAgICAgY29weUJ1dHRvbi5pbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9XCJjbGlwYm9hcmQtaWNvblwiPlx1RDgzRFx1RENDQjwvc3Bhbj4nO1xuICAgICAgICAvKlxuICAgICAgICBjb3B5QnV0dG9uLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuICAgICAgICBjb3B5QnV0dG9uLnN0eWxlLnpJbmRleCA9IFwiMTBcIjtcbiAgICAgICAgKi9cbiAgICAgICAgY29weUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGhpcy4jdGV4dCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29weUJ1dHRvbi5pbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9XCJjaGVja21hcmstaWNvblwiPlx1MjcxNFx1RkUwRjwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb3B5QnV0dG9uLmlubmVySFRNTCA9ICc8c3BhbiBjbGFzcz1cImNsaXBib2FyZC1pY29uXCI+XHVEODNEXHVEQ0NCPC9zcGFuPic7XG4gICAgICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gY29weTogXCIsIGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYnV0dG9uUGFuZWwuYXBwZW5kKGNvcHlCdXR0b24pO1xuXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgY29udGVudCBlbGVtZW50XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBNYXJrZG93blJlbmRlcmVyLnJlbmRlcih0aGlzLiNBcHAsIHRleHQsIGNvbnRlbnQsIFwiXCIsIHRoaXMuI1BsdWdpbik7XG5cbiAgICAgICAgbWVzc2FnZS5jbGFzc0xpc3QuYWRkKFwiY2hhdC1tZXNzYWdlXCIpO1xuICAgICAgICBpZiAodXNlcilcbiAgICAgICAgICAgIG1lc3NhZ2UuY2xhc3NMaXN0LmFkZChcInVzZXItbWVzc2FnZVwiKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbWVzc2FnZS5jbGFzc0xpc3QuYWRkKFwiYWktbWVzc2FnZVwiKTtcblxuICAgICAgICAvLyBTdHlsZSB0aGUgbWVzc2FnZSBjb250YWluZXJcbiAgICAgICAgbWVzc2FnZS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgICAgICAgbWVzc2FnZS5zdHlsZS5wYWRkaW5nID0gXCIxMHB4XCI7IC8vIEFkZCBwYWRkaW5nIHRvIGF2b2lkIG92ZXJsYXAgd2l0aCB0aGUgYnV0dG9uXG5cbiAgICAgICAgLy8gQXBwZW5kIHRoZSBidXR0b24gcGFuZWwgYW5kIGNvbnRlbnQgdG8gdGhlIG1lc3NhZ2VcbiAgICAgICAgbWVzc2FnZS5hcHBlbmRDaGlsZChidXR0b25QYW5lbCk7XG4gICAgICAgIG1lc3NhZ2UuYXBwZW5kQ2hpbGQoY29udGVudCk7XG5cbiAgICAgICAgLy8gUHJlcGVuZCB0aGUgbWVzc2FnZSB0byB0aGUgcGFyZW50IGVsZW1lbnRcbiAgICAgICAgcGFyZW50LnByZXBlbmQobWVzc2FnZSk7XG5cbiAgICAgICAgLy8gU2hvdyB0aGUgYnV0dG9uIHBhbmVsIG9uIGhvdmVyXG4gICAgICAgIG1lc3NhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgYnV0dG9uUGFuZWwuc3R5bGUub3BhY2l0eSA9IFwiMVwiO1xuICAgICAgICB9KTtcbiAgICAgICAgbWVzc2FnZS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBidXR0b25QYW5lbC5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUG9zc2libGUgcm9sZXMuXG4gKiBAcHVibGljXG4gKi9cbmNvbnN0IFBPU1NJQkxFX1JPTEVTID0gW1widXNlclwiLCBcIm1vZGVsXCIsIFwiZnVuY3Rpb25cIiwgXCJzeXN0ZW1cIl07XG4vKipcbiAqIEhhcm0gY2F0ZWdvcmllcyB0aGF0IHdvdWxkIGNhdXNlIHByb21wdHMgb3IgY2FuZGlkYXRlcyB0byBiZSBibG9ja2VkLlxuICogQHB1YmxpY1xuICovXG52YXIgSGFybUNhdGVnb3J5O1xuKGZ1bmN0aW9uIChIYXJtQ2F0ZWdvcnkpIHtcbiAgICBIYXJtQ2F0ZWdvcnlbXCJIQVJNX0NBVEVHT1JZX1VOU1BFQ0lGSUVEXCJdID0gXCJIQVJNX0NBVEVHT1JZX1VOU1BFQ0lGSUVEXCI7XG4gICAgSGFybUNhdGVnb3J5W1wiSEFSTV9DQVRFR09SWV9IQVRFX1NQRUVDSFwiXSA9IFwiSEFSTV9DQVRFR09SWV9IQVRFX1NQRUVDSFwiO1xuICAgIEhhcm1DYXRlZ29yeVtcIkhBUk1fQ0FURUdPUllfU0VYVUFMTFlfRVhQTElDSVRcIl0gPSBcIkhBUk1fQ0FURUdPUllfU0VYVUFMTFlfRVhQTElDSVRcIjtcbiAgICBIYXJtQ2F0ZWdvcnlbXCJIQVJNX0NBVEVHT1JZX0hBUkFTU01FTlRcIl0gPSBcIkhBUk1fQ0FURUdPUllfSEFSQVNTTUVOVFwiO1xuICAgIEhhcm1DYXRlZ29yeVtcIkhBUk1fQ0FURUdPUllfREFOR0VST1VTX0NPTlRFTlRcIl0gPSBcIkhBUk1fQ0FURUdPUllfREFOR0VST1VTX0NPTlRFTlRcIjtcbn0pKEhhcm1DYXRlZ29yeSB8fCAoSGFybUNhdGVnb3J5ID0ge30pKTtcbi8qKlxuICogVGhyZXNob2xkIGFib3ZlIHdoaWNoIGEgcHJvbXB0IG9yIGNhbmRpZGF0ZSB3aWxsIGJlIGJsb2NrZWQuXG4gKiBAcHVibGljXG4gKi9cbnZhciBIYXJtQmxvY2tUaHJlc2hvbGQ7XG4oZnVuY3Rpb24gKEhhcm1CbG9ja1RocmVzaG9sZCkge1xuICAgIC8vIFRocmVzaG9sZCBpcyB1bnNwZWNpZmllZC5cbiAgICBIYXJtQmxvY2tUaHJlc2hvbGRbXCJIQVJNX0JMT0NLX1RIUkVTSE9MRF9VTlNQRUNJRklFRFwiXSA9IFwiSEFSTV9CTE9DS19USFJFU0hPTERfVU5TUEVDSUZJRURcIjtcbiAgICAvLyBDb250ZW50IHdpdGggTkVHTElHSUJMRSB3aWxsIGJlIGFsbG93ZWQuXG4gICAgSGFybUJsb2NrVGhyZXNob2xkW1wiQkxPQ0tfTE9XX0FORF9BQk9WRVwiXSA9IFwiQkxPQ0tfTE9XX0FORF9BQk9WRVwiO1xuICAgIC8vIENvbnRlbnQgd2l0aCBORUdMSUdJQkxFIGFuZCBMT1cgd2lsbCBiZSBhbGxvd2VkLlxuICAgIEhhcm1CbG9ja1RocmVzaG9sZFtcIkJMT0NLX01FRElVTV9BTkRfQUJPVkVcIl0gPSBcIkJMT0NLX01FRElVTV9BTkRfQUJPVkVcIjtcbiAgICAvLyBDb250ZW50IHdpdGggTkVHTElHSUJMRSwgTE9XLCBhbmQgTUVESVVNIHdpbGwgYmUgYWxsb3dlZC5cbiAgICBIYXJtQmxvY2tUaHJlc2hvbGRbXCJCTE9DS19PTkxZX0hJR0hcIl0gPSBcIkJMT0NLX09OTFlfSElHSFwiO1xuICAgIC8vIEFsbCBjb250ZW50IHdpbGwgYmUgYWxsb3dlZC5cbiAgICBIYXJtQmxvY2tUaHJlc2hvbGRbXCJCTE9DS19OT05FXCJdID0gXCJCTE9DS19OT05FXCI7XG59KShIYXJtQmxvY2tUaHJlc2hvbGQgfHwgKEhhcm1CbG9ja1RocmVzaG9sZCA9IHt9KSk7XG4vKipcbiAqIFByb2JhYmlsaXR5IHRoYXQgYSBwcm9tcHQgb3IgY2FuZGlkYXRlIG1hdGNoZXMgYSBoYXJtIGNhdGVnb3J5LlxuICogQHB1YmxpY1xuICovXG52YXIgSGFybVByb2JhYmlsaXR5O1xuKGZ1bmN0aW9uIChIYXJtUHJvYmFiaWxpdHkpIHtcbiAgICAvLyBQcm9iYWJpbGl0eSBpcyB1bnNwZWNpZmllZC5cbiAgICBIYXJtUHJvYmFiaWxpdHlbXCJIQVJNX1BST0JBQklMSVRZX1VOU1BFQ0lGSUVEXCJdID0gXCJIQVJNX1BST0JBQklMSVRZX1VOU1BFQ0lGSUVEXCI7XG4gICAgLy8gQ29udGVudCBoYXMgYSBuZWdsaWdpYmxlIGNoYW5jZSBvZiBiZWluZyB1bnNhZmUuXG4gICAgSGFybVByb2JhYmlsaXR5W1wiTkVHTElHSUJMRVwiXSA9IFwiTkVHTElHSUJMRVwiO1xuICAgIC8vIENvbnRlbnQgaGFzIGEgbG93IGNoYW5jZSBvZiBiZWluZyB1bnNhZmUuXG4gICAgSGFybVByb2JhYmlsaXR5W1wiTE9XXCJdID0gXCJMT1dcIjtcbiAgICAvLyBDb250ZW50IGhhcyBhIG1lZGl1bSBjaGFuY2Ugb2YgYmVpbmcgdW5zYWZlLlxuICAgIEhhcm1Qcm9iYWJpbGl0eVtcIk1FRElVTVwiXSA9IFwiTUVESVVNXCI7XG4gICAgLy8gQ29udGVudCBoYXMgYSBoaWdoIGNoYW5jZSBvZiBiZWluZyB1bnNhZmUuXG4gICAgSGFybVByb2JhYmlsaXR5W1wiSElHSFwiXSA9IFwiSElHSFwiO1xufSkoSGFybVByb2JhYmlsaXR5IHx8IChIYXJtUHJvYmFiaWxpdHkgPSB7fSkpO1xuLyoqXG4gKiBSZWFzb24gdGhhdCBhIHByb21wdCB3YXMgYmxvY2tlZC5cbiAqIEBwdWJsaWNcbiAqL1xudmFyIEJsb2NrUmVhc29uO1xuKGZ1bmN0aW9uIChCbG9ja1JlYXNvbikge1xuICAgIC8vIEEgYmxvY2tlZCByZWFzb24gd2FzIG5vdCBzcGVjaWZpZWQuXG4gICAgQmxvY2tSZWFzb25bXCJCTE9DS0VEX1JFQVNPTl9VTlNQRUNJRklFRFwiXSA9IFwiQkxPQ0tFRF9SRUFTT05fVU5TUEVDSUZJRURcIjtcbiAgICAvLyBDb250ZW50IHdhcyBibG9ja2VkIGJ5IHNhZmV0eSBzZXR0aW5ncy5cbiAgICBCbG9ja1JlYXNvbltcIlNBRkVUWVwiXSA9IFwiU0FGRVRZXCI7XG4gICAgLy8gQ29udGVudCB3YXMgYmxvY2tlZCwgYnV0IHRoZSByZWFzb24gaXMgdW5jYXRlZ29yaXplZC5cbiAgICBCbG9ja1JlYXNvbltcIk9USEVSXCJdID0gXCJPVEhFUlwiO1xufSkoQmxvY2tSZWFzb24gfHwgKEJsb2NrUmVhc29uID0ge30pKTtcbi8qKlxuICogUmVhc29uIHRoYXQgYSBjYW5kaWRhdGUgZmluaXNoZWQuXG4gKiBAcHVibGljXG4gKi9cbnZhciBGaW5pc2hSZWFzb247XG4oZnVuY3Rpb24gKEZpbmlzaFJlYXNvbikge1xuICAgIC8vIERlZmF1bHQgdmFsdWUuIFRoaXMgdmFsdWUgaXMgdW51c2VkLlxuICAgIEZpbmlzaFJlYXNvbltcIkZJTklTSF9SRUFTT05fVU5TUEVDSUZJRURcIl0gPSBcIkZJTklTSF9SRUFTT05fVU5TUEVDSUZJRURcIjtcbiAgICAvLyBOYXR1cmFsIHN0b3AgcG9pbnQgb2YgdGhlIG1vZGVsIG9yIHByb3ZpZGVkIHN0b3Agc2VxdWVuY2UuXG4gICAgRmluaXNoUmVhc29uW1wiU1RPUFwiXSA9IFwiU1RPUFwiO1xuICAgIC8vIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgYXMgc3BlY2lmaWVkIGluIHRoZSByZXF1ZXN0IHdhcyByZWFjaGVkLlxuICAgIEZpbmlzaFJlYXNvbltcIk1BWF9UT0tFTlNcIl0gPSBcIk1BWF9UT0tFTlNcIjtcbiAgICAvLyBUaGUgY2FuZGlkYXRlIGNvbnRlbnQgd2FzIGZsYWdnZWQgZm9yIHNhZmV0eSByZWFzb25zLlxuICAgIEZpbmlzaFJlYXNvbltcIlNBRkVUWVwiXSA9IFwiU0FGRVRZXCI7XG4gICAgLy8gVGhlIGNhbmRpZGF0ZSBjb250ZW50IHdhcyBmbGFnZ2VkIGZvciByZWNpdGF0aW9uIHJlYXNvbnMuXG4gICAgRmluaXNoUmVhc29uW1wiUkVDSVRBVElPTlwiXSA9IFwiUkVDSVRBVElPTlwiO1xuICAgIC8vIFVua25vd24gcmVhc29uLlxuICAgIEZpbmlzaFJlYXNvbltcIk9USEVSXCJdID0gXCJPVEhFUlwiO1xufSkoRmluaXNoUmVhc29uIHx8IChGaW5pc2hSZWFzb24gPSB7fSkpO1xuLyoqXG4gKiBUYXNrIHR5cGUgZm9yIGVtYmVkZGluZyBjb250ZW50LlxuICogQHB1YmxpY1xuICovXG52YXIgVGFza1R5cGU7XG4oZnVuY3Rpb24gKFRhc2tUeXBlKSB7XG4gICAgVGFza1R5cGVbXCJUQVNLX1RZUEVfVU5TUEVDSUZJRURcIl0gPSBcIlRBU0tfVFlQRV9VTlNQRUNJRklFRFwiO1xuICAgIFRhc2tUeXBlW1wiUkVUUklFVkFMX1FVRVJZXCJdID0gXCJSRVRSSUVWQUxfUVVFUllcIjtcbiAgICBUYXNrVHlwZVtcIlJFVFJJRVZBTF9ET0NVTUVOVFwiXSA9IFwiUkVUUklFVkFMX0RPQ1VNRU5UXCI7XG4gICAgVGFza1R5cGVbXCJTRU1BTlRJQ19TSU1JTEFSSVRZXCJdID0gXCJTRU1BTlRJQ19TSU1JTEFSSVRZXCI7XG4gICAgVGFza1R5cGVbXCJDTEFTU0lGSUNBVElPTlwiXSA9IFwiQ0xBU1NJRklDQVRJT05cIjtcbiAgICBUYXNrVHlwZVtcIkNMVVNURVJJTkdcIl0gPSBcIkNMVVNURVJJTkdcIjtcbn0pKFRhc2tUeXBlIHx8IChUYXNrVHlwZSA9IHt9KSk7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xudmFyIEZ1bmN0aW9uQ2FsbGluZ01vZGU7XG4oZnVuY3Rpb24gKEZ1bmN0aW9uQ2FsbGluZ01vZGUpIHtcbiAgICAvLyBVbnNwZWNpZmllZCBmdW5jdGlvbiBjYWxsaW5nIG1vZGUuIFRoaXMgdmFsdWUgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICAgIEZ1bmN0aW9uQ2FsbGluZ01vZGVbXCJNT0RFX1VOU1BFQ0lGSUVEXCJdID0gXCJNT0RFX1VOU1BFQ0lGSUVEXCI7XG4gICAgLy8gRGVmYXVsdCBtb2RlbCBiZWhhdmlvciwgbW9kZWwgZGVjaWRlcyB0byBwcmVkaWN0IGVpdGhlciBhIGZ1bmN0aW9uIGNhbGxcbiAgICAvLyBvciBhIG5hdHVyYWwgbGFuZ3VhZ2UgcmVwc3Bvc2UuXG4gICAgRnVuY3Rpb25DYWxsaW5nTW9kZVtcIkFVVE9cIl0gPSBcIkFVVE9cIjtcbiAgICAvLyBNb2RlbCBpcyBjb25zdHJhaW5lZCB0byBhbHdheXMgcHJlZGljdGluZyBhIGZ1bmN0aW9uIGNhbGwgb25seS5cbiAgICAvLyBJZiBcImFsbG93ZWRfZnVuY3Rpb25fbmFtZXNcIiBhcmUgc2V0LCB0aGUgcHJlZGljdGVkIGZ1bmN0aW9uIGNhbGwgd2lsbCBiZVxuICAgIC8vIGxpbWl0ZWQgdG8gYW55IG9uZSBvZiBcImFsbG93ZWRfZnVuY3Rpb25fbmFtZXNcIiwgZWxzZSB0aGUgcHJlZGljdGVkXG4gICAgLy8gZnVuY3Rpb24gY2FsbCB3aWxsIGJlIGFueSBvbmUgb2YgdGhlIHByb3ZpZGVkIFwiZnVuY3Rpb25fZGVjbGFyYXRpb25zXCIuXG4gICAgRnVuY3Rpb25DYWxsaW5nTW9kZVtcIkFOWVwiXSA9IFwiQU5ZXCI7XG4gICAgLy8gTW9kZWwgd2lsbCBub3QgcHJlZGljdCBhbnkgZnVuY3Rpb24gY2FsbC4gTW9kZWwgYmVoYXZpb3IgaXMgc2FtZSBhcyB3aGVuXG4gICAgLy8gbm90IHBhc3NpbmcgYW55IGZ1bmN0aW9uIGRlY2xhcmF0aW9ucy5cbiAgICBGdW5jdGlvbkNhbGxpbmdNb2RlW1wiTk9ORVwiXSA9IFwiTk9ORVwiO1xufSkoRnVuY3Rpb25DYWxsaW5nTW9kZSB8fCAoRnVuY3Rpb25DYWxsaW5nTW9kZSA9IHt9KSk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDI0IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIENvbnRhaW5zIHRoZSBsaXN0IG9mIE9wZW5BUEkgZGF0YSB0eXBlc1xuICogYXMgZGVmaW5lZCBieSBodHRwczovL3N3YWdnZXIuaW8vZG9jcy9zcGVjaWZpY2F0aW9uL2RhdGEtbW9kZWxzL2RhdGEtdHlwZXMvXG4gKiBAcHVibGljXG4gKi9cbnZhciBGdW5jdGlvbkRlY2xhcmF0aW9uU2NoZW1hVHlwZTtcbihmdW5jdGlvbiAoRnVuY3Rpb25EZWNsYXJhdGlvblNjaGVtYVR5cGUpIHtcbiAgICAvKiogU3RyaW5nIHR5cGUuICovXG4gICAgRnVuY3Rpb25EZWNsYXJhdGlvblNjaGVtYVR5cGVbXCJTVFJJTkdcIl0gPSBcIlNUUklOR1wiO1xuICAgIC8qKiBOdW1iZXIgdHlwZS4gKi9cbiAgICBGdW5jdGlvbkRlY2xhcmF0aW9uU2NoZW1hVHlwZVtcIk5VTUJFUlwiXSA9IFwiTlVNQkVSXCI7XG4gICAgLyoqIEludGVnZXIgdHlwZS4gKi9cbiAgICBGdW5jdGlvbkRlY2xhcmF0aW9uU2NoZW1hVHlwZVtcIklOVEVHRVJcIl0gPSBcIklOVEVHRVJcIjtcbiAgICAvKiogQm9vbGVhbiB0eXBlLiAqL1xuICAgIEZ1bmN0aW9uRGVjbGFyYXRpb25TY2hlbWFUeXBlW1wiQk9PTEVBTlwiXSA9IFwiQk9PTEVBTlwiO1xuICAgIC8qKiBBcnJheSB0eXBlLiAqL1xuICAgIEZ1bmN0aW9uRGVjbGFyYXRpb25TY2hlbWFUeXBlW1wiQVJSQVlcIl0gPSBcIkFSUkFZXCI7XG4gICAgLyoqIE9iamVjdCB0eXBlLiAqL1xuICAgIEZ1bmN0aW9uRGVjbGFyYXRpb25TY2hlbWFUeXBlW1wiT0JKRUNUXCJdID0gXCJPQkpFQ1RcIjtcbn0pKEZ1bmN0aW9uRGVjbGFyYXRpb25TY2hlbWFUeXBlIHx8IChGdW5jdGlvbkRlY2xhcmF0aW9uU2NoZW1hVHlwZSA9IHt9KSk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDI0IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEJhc2ljIGVycm9yIHR5cGUgZm9yIHRoaXMgU0RLLlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBHb29nbGVHZW5lcmF0aXZlQUlFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKGBbR29vZ2xlR2VuZXJhdGl2ZUFJIEVycm9yXTogJHttZXNzYWdlfWApO1xuICAgIH1cbn1cbi8qKlxuICogRXJyb3JzIGluIHRoZSBjb250ZW50cyBvZiBhIHJlc3BvbnNlIGZyb20gdGhlIG1vZGVsLiBUaGlzIGluY2x1ZGVzIHBhcnNpbmdcbiAqIGVycm9ycywgb3IgcmVzcG9uc2VzIGluY2x1ZGluZyBhIHNhZmV0eSBibG9jayByZWFzb24uXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIEdvb2dsZUdlbmVyYXRpdmVBSVJlc3BvbnNlRXJyb3IgZXh0ZW5kcyBHb29nbGVHZW5lcmF0aXZlQUlFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgcmVzcG9uc2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB9XG59XG4vKipcbiAqIEVycm9yIGNsYXNzIGNvdmVyaW5nIEhUVFAgZXJyb3JzIHdoZW4gY2FsbGluZyB0aGUgc2VydmVyLiBJbmNsdWRlcyBIVFRQXG4gKiBzdGF0dXMsIHN0YXR1c1RleHQsIGFuZCBvcHRpb25hbCBkZXRhaWxzLCBpZiBwcm92aWRlZCBpbiB0aGUgc2VydmVyIHJlc3BvbnNlLlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBHb29nbGVHZW5lcmF0aXZlQUlGZXRjaEVycm9yIGV4dGVuZHMgR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXR1cywgc3RhdHVzVGV4dCwgZXJyb3JEZXRhaWxzKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dDtcbiAgICAgICAgdGhpcy5lcnJvckRldGFpbHMgPSBlcnJvckRldGFpbHM7XG4gICAgfVxufVxuLyoqXG4gKiBFcnJvcnMgaW4gdGhlIGNvbnRlbnRzIG9mIGEgcmVxdWVzdCBvcmlnaW5hdGluZyBmcm9tIHVzZXIgaW5wdXQuXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIEdvb2dsZUdlbmVyYXRpdmVBSVJlcXVlc3RJbnB1dEVycm9yIGV4dGVuZHMgR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3Ige1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY29uc3QgREVGQVVMVF9CQVNFX1VSTCA9IFwiaHR0cHM6Ly9nZW5lcmF0aXZlbGFuZ3VhZ2UuZ29vZ2xlYXBpcy5jb21cIjtcbmNvbnN0IERFRkFVTFRfQVBJX1ZFUlNJT04gPSBcInYxYmV0YVwiO1xuLyoqXG4gKiBXZSBjYW4ndCBgcmVxdWlyZWAgcGFja2FnZS5qc29uIGlmIHRoaXMgcnVucyBvbiB3ZWIuIFdlIHdpbGwgdXNlIHJvbGx1cCB0b1xuICogc3dhcCBpbiB0aGUgdmVyc2lvbiBudW1iZXIgaGVyZSBhdCBidWlsZCB0aW1lLlxuICovXG5jb25zdCBQQUNLQUdFX1ZFUlNJT04gPSBcIjAuMTIuMFwiO1xuY29uc3QgUEFDS0FHRV9MT0dfSEVBREVSID0gXCJnZW5haS1qc1wiO1xudmFyIFRhc2s7XG4oZnVuY3Rpb24gKFRhc2spIHtcbiAgICBUYXNrW1wiR0VORVJBVEVfQ09OVEVOVFwiXSA9IFwiZ2VuZXJhdGVDb250ZW50XCI7XG4gICAgVGFza1tcIlNUUkVBTV9HRU5FUkFURV9DT05URU5UXCJdID0gXCJzdHJlYW1HZW5lcmF0ZUNvbnRlbnRcIjtcbiAgICBUYXNrW1wiQ09VTlRfVE9LRU5TXCJdID0gXCJjb3VudFRva2Vuc1wiO1xuICAgIFRhc2tbXCJFTUJFRF9DT05URU5UXCJdID0gXCJlbWJlZENvbnRlbnRcIjtcbiAgICBUYXNrW1wiQkFUQ0hfRU1CRURfQ09OVEVOVFNcIl0gPSBcImJhdGNoRW1iZWRDb250ZW50c1wiO1xufSkoVGFzayB8fCAoVGFzayA9IHt9KSk7XG5jbGFzcyBSZXF1ZXN0VXJsIHtcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbCwgdGFzaywgYXBpS2V5LCBzdHJlYW0sIHJlcXVlc3RPcHRpb25zKSB7XG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcbiAgICAgICAgdGhpcy50YXNrID0gdGFzaztcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBhcGlLZXk7XG4gICAgICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtO1xuICAgICAgICB0aGlzLnJlcXVlc3RPcHRpb25zID0gcmVxdWVzdE9wdGlvbnM7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBhcGlWZXJzaW9uID0gKChfYSA9IHRoaXMucmVxdWVzdE9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hcGlWZXJzaW9uKSB8fCBERUZBVUxUX0FQSV9WRVJTSU9OO1xuICAgICAgICBjb25zdCBiYXNlVXJsID0gKChfYiA9IHRoaXMucmVxdWVzdE9wdGlvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5iYXNlVXJsKSB8fCBERUZBVUxUX0JBU0VfVVJMO1xuICAgICAgICBsZXQgdXJsID0gYCR7YmFzZVVybH0vJHthcGlWZXJzaW9ufS8ke3RoaXMubW9kZWx9OiR7dGhpcy50YXNrfWA7XG4gICAgICAgIGlmICh0aGlzLnN0cmVhbSkge1xuICAgICAgICAgICAgdXJsICs9IFwiP2FsdD1zc2VcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH1cbn1cbi8qKlxuICogU2ltcGxlLCBidXQgbWF5IGJlY29tZSBtb3JlIGNvbXBsZXggaWYgd2UgYWRkIG1vcmUgdmVyc2lvbnMgdG8gbG9nLlxuICovXG5mdW5jdGlvbiBnZXRDbGllbnRIZWFkZXJzKHJlcXVlc3RPcHRpb25zKSB7XG4gICAgY29uc3QgY2xpZW50SGVhZGVycyA9IFtdO1xuICAgIGlmIChyZXF1ZXN0T3B0aW9ucyA9PT0gbnVsbCB8fCByZXF1ZXN0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdE9wdGlvbnMuYXBpQ2xpZW50KSB7XG4gICAgICAgIGNsaWVudEhlYWRlcnMucHVzaChyZXF1ZXN0T3B0aW9ucy5hcGlDbGllbnQpO1xuICAgIH1cbiAgICBjbGllbnRIZWFkZXJzLnB1c2goYCR7UEFDS0FHRV9MT0dfSEVBREVSfS8ke1BBQ0tBR0VfVkVSU0lPTn1gKTtcbiAgICByZXR1cm4gY2xpZW50SGVhZGVycy5qb2luKFwiIFwiKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldEhlYWRlcnModXJsKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG4gICAgaGVhZGVycy5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgIGhlYWRlcnMuYXBwZW5kKFwieC1nb29nLWFwaS1jbGllbnRcIiwgZ2V0Q2xpZW50SGVhZGVycyh1cmwucmVxdWVzdE9wdGlvbnMpKTtcbiAgICBoZWFkZXJzLmFwcGVuZChcIngtZ29vZy1hcGkta2V5XCIsIHVybC5hcGlLZXkpO1xuICAgIGxldCBjdXN0b21IZWFkZXJzID0gdXJsLnJlcXVlc3RPcHRpb25zLmN1c3RvbUhlYWRlcnM7XG4gICAgaWYgKGN1c3RvbUhlYWRlcnMpIHtcbiAgICAgICAgaWYgKCEoY3VzdG9tSGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGN1c3RvbUhlYWRlcnMgPSBuZXcgSGVhZGVycyhjdXN0b21IZWFkZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEdvb2dsZUdlbmVyYXRpdmVBSVJlcXVlc3RJbnB1dEVycm9yKGB1bmFibGUgdG8gY29udmVydCBjdXN0b21IZWFkZXJzIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoY3VzdG9tSGVhZGVycyl9IHRvIEhlYWRlcnM6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgW2hlYWRlck5hbWUsIGhlYWRlclZhbHVlXSBvZiBjdXN0b21IZWFkZXJzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgaWYgKGhlYWRlck5hbWUgPT09IFwieC1nb29nLWFwaS1rZXlcIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBHb29nbGVHZW5lcmF0aXZlQUlSZXF1ZXN0SW5wdXRFcnJvcihgQ2Fubm90IHNldCByZXNlcnZlZCBoZWFkZXIgbmFtZSAke2hlYWRlck5hbWV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoZWFkZXJOYW1lID09PSBcIngtZ29vZy1hcGktY2xpZW50XCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJUmVxdWVzdElucHV0RXJyb3IoYEhlYWRlciBuYW1lICR7aGVhZGVyTmFtZX0gY2FuIG9ubHkgYmUgc2V0IHVzaW5nIHRoZSBhcGlDbGllbnQgZmllbGRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKGhlYWRlck5hbWUsIGhlYWRlclZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGVhZGVycztcbn1cbmFzeW5jIGZ1bmN0aW9uIGNvbnN0cnVjdFJlcXVlc3QobW9kZWwsIHRhc2ssIGFwaUtleSwgc3RyZWFtLCBib2R5LCByZXF1ZXN0T3B0aW9ucykge1xuICAgIGNvbnN0IHVybCA9IG5ldyBSZXF1ZXN0VXJsKG1vZGVsLCB0YXNrLCBhcGlLZXksIHN0cmVhbSwgcmVxdWVzdE9wdGlvbnMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHVybDogdXJsLnRvU3RyaW5nKCksXG4gICAgICAgIGZldGNoT3B0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBidWlsZEZldGNoT3B0aW9ucyhyZXF1ZXN0T3B0aW9ucykpLCB7IG1ldGhvZDogXCJQT1NUXCIsIGhlYWRlcnM6IGF3YWl0IGdldEhlYWRlcnModXJsKSwgYm9keSB9KSxcbiAgICB9O1xufVxuLyoqXG4gKiBXcmFwcGVyIGZvciBfbWFrZVJlcXVlc3RJbnRlcm5hbCB0aGF0IGF1dG9tYXRpY2FsbHkgdXNlcyBuYXRpdmUgZmV0Y2gsXG4gKiBhbGxvd2luZyBfbWFrZVJlcXVlc3RJbnRlcm5hbCB0byBiZSB0ZXN0ZWQgd2l0aCBhIG1vY2tlZCBmZXRjaCBmdW5jdGlvbi5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gbWFrZVJlcXVlc3QobW9kZWwsIHRhc2ssIGFwaUtleSwgc3RyZWFtLCBib2R5LCByZXF1ZXN0T3B0aW9ucykge1xuICAgIHJldHVybiBfbWFrZVJlcXVlc3RJbnRlcm5hbChtb2RlbCwgdGFzaywgYXBpS2V5LCBzdHJlYW0sIGJvZHksIHJlcXVlc3RPcHRpb25zLCBmZXRjaCk7XG59XG5hc3luYyBmdW5jdGlvbiBfbWFrZVJlcXVlc3RJbnRlcm5hbChtb2RlbCwgdGFzaywgYXBpS2V5LCBzdHJlYW0sIGJvZHksIHJlcXVlc3RPcHRpb25zLCBcbi8vIEFsbG93cyB0aGlzIHRvIGJlIHN0dWJiZWQgZm9yIHRlc3RzXG5mZXRjaEZuID0gZmV0Y2gpIHtcbiAgICBjb25zdCB1cmwgPSBuZXcgUmVxdWVzdFVybChtb2RlbCwgdGFzaywgYXBpS2V5LCBzdHJlYW0sIHJlcXVlc3RPcHRpb25zKTtcbiAgICBsZXQgcmVzcG9uc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IGF3YWl0IGNvbnN0cnVjdFJlcXVlc3QobW9kZWwsIHRhc2ssIGFwaUtleSwgc3RyZWFtLCBib2R5LCByZXF1ZXN0T3B0aW9ucyk7XG4gICAgICAgIHJlc3BvbnNlID0gYXdhaXQgZmV0Y2hGbihyZXF1ZXN0LnVybCwgcmVxdWVzdC5mZXRjaE9wdGlvbnMpO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZSA9IFwiXCI7XG4gICAgICAgICAgICBsZXQgZXJyb3JEZXRhaWxzO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBqc29uLmVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgaWYgKGpzb24uZXJyb3IuZGV0YWlscykge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlICs9IGAgJHtKU09OLnN0cmluZ2lmeShqc29uLmVycm9yLmRldGFpbHMpfWA7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yRGV0YWlscyA9IGpzb24uZXJyb3IuZGV0YWlscztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIGlnbm9yZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBHb29nbGVHZW5lcmF0aXZlQUlGZXRjaEVycm9yKGBFcnJvciBmZXRjaGluZyBmcm9tICR7dXJsLnRvU3RyaW5nKCl9OiBbJHtyZXNwb25zZS5zdGF0dXN9ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1dICR7bWVzc2FnZX1gLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQsIGVycm9yRGV0YWlscyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgbGV0IGVyciA9IGU7XG4gICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiBHb29nbGVHZW5lcmF0aXZlQUlGZXRjaEVycm9yIHx8XG4gICAgICAgICAgICBlIGluc3RhbmNlb2YgR29vZ2xlR2VuZXJhdGl2ZUFJUmVxdWVzdElucHV0RXJyb3IpKSB7XG4gICAgICAgICAgICBlcnIgPSBuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3IoYEVycm9yIGZldGNoaW5nIGZyb20gJHt1cmwudG9TdHJpbmcoKX06ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgICAgICAgZXJyLnN0YWNrID0gZS5zdGFjaztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZTtcbn1cbi8qKlxuICogR2VuZXJhdGVzIHRoZSByZXF1ZXN0IG9wdGlvbnMgdG8gYmUgcGFzc2VkIHRvIHRoZSBmZXRjaCBBUEkuXG4gKiBAcGFyYW0gcmVxdWVzdE9wdGlvbnMgLSBUaGUgdXNlci1kZWZpbmVkIHJlcXVlc3Qgb3B0aW9ucy5cbiAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgcmVxdWVzdCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBidWlsZEZldGNoT3B0aW9ucyhyZXF1ZXN0T3B0aW9ucykge1xuICAgIGNvbnN0IGZldGNoT3B0aW9ucyA9IHt9O1xuICAgIGlmICgocmVxdWVzdE9wdGlvbnMgPT09IG51bGwgfHwgcmVxdWVzdE9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3RPcHRpb25zLnRpbWVvdXQpID49IDApIHtcbiAgICAgICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICBjb25zdCBzaWduYWwgPSBhYm9ydENvbnRyb2xsZXIuc2lnbmFsO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGFib3J0Q29udHJvbGxlci5hYm9ydCgpLCByZXF1ZXN0T3B0aW9ucy50aW1lb3V0KTtcbiAgICAgICAgZmV0Y2hPcHRpb25zLnNpZ25hbCA9IHNpZ25hbDtcbiAgICB9XG4gICAgcmV0dXJuIGZldGNoT3B0aW9ucztcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQWRkcyBjb252ZW5pZW5jZSBoZWxwZXIgbWV0aG9kcyB0byBhIHJlc3BvbnNlIG9iamVjdCwgaW5jbHVkaW5nIHN0cmVhbVxuICogY2h1bmtzIChhcyBsb25nIGFzIGVhY2ggY2h1bmsgaXMgYSBjb21wbGV0ZSBHZW5lcmF0ZUNvbnRlbnRSZXNwb25zZSBKU09OKS5cbiAqL1xuZnVuY3Rpb24gYWRkSGVscGVycyhyZXNwb25zZSkge1xuICAgIHJlc3BvbnNlLnRleHQgPSAoKSA9PiB7XG4gICAgICAgIGlmIChyZXNwb25zZS5jYW5kaWRhdGVzICYmIHJlc3BvbnNlLmNhbmRpZGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmNhbmRpZGF0ZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVGhpcyByZXNwb25zZSBoYWQgJHtyZXNwb25zZS5jYW5kaWRhdGVzLmxlbmd0aH0gYCArXG4gICAgICAgICAgICAgICAgICAgIGBjYW5kaWRhdGVzLiBSZXR1cm5pbmcgdGV4dCBmcm9tIHRoZSBmaXJzdCBjYW5kaWRhdGUgb25seS4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBBY2Nlc3MgcmVzcG9uc2UuY2FuZGlkYXRlcyBkaXJlY3RseSB0byB1c2UgdGhlIG90aGVyIGNhbmRpZGF0ZXMuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFkQmFkRmluaXNoUmVhc29uKHJlc3BvbnNlLmNhbmRpZGF0ZXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEdvb2dsZUdlbmVyYXRpdmVBSVJlc3BvbnNlRXJyb3IoYCR7Zm9ybWF0QmxvY2tFcnJvck1lc3NhZ2UocmVzcG9uc2UpfWAsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBnZXRUZXh0KHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXNwb25zZS5wcm9tcHRGZWVkYmFjaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEdvb2dsZUdlbmVyYXRpdmVBSVJlc3BvbnNlRXJyb3IoYFRleHQgbm90IGF2YWlsYWJsZS4gJHtmb3JtYXRCbG9ja0Vycm9yTWVzc2FnZShyZXNwb25zZSl9YCwgcmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVE9ETzogcmVtb3ZlIGF0IG5leHQgbWFqb3IgdmVyc2lvblxuICAgICAqL1xuICAgIHJlc3BvbnNlLmZ1bmN0aW9uQ2FsbCA9ICgpID0+IHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmNhbmRpZGF0ZXMgJiYgcmVzcG9uc2UuY2FuZGlkYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuY2FuZGlkYXRlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBUaGlzIHJlc3BvbnNlIGhhZCAke3Jlc3BvbnNlLmNhbmRpZGF0ZXMubGVuZ3RofSBgICtcbiAgICAgICAgICAgICAgICAgICAgYGNhbmRpZGF0ZXMuIFJldHVybmluZyBmdW5jdGlvbiBjYWxscyBmcm9tIHRoZSBmaXJzdCBjYW5kaWRhdGUgb25seS4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBBY2Nlc3MgcmVzcG9uc2UuY2FuZGlkYXRlcyBkaXJlY3RseSB0byB1c2UgdGhlIG90aGVyIGNhbmRpZGF0ZXMuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFkQmFkRmluaXNoUmVhc29uKHJlc3BvbnNlLmNhbmRpZGF0ZXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEdvb2dsZUdlbmVyYXRpdmVBSVJlc3BvbnNlRXJyb3IoYCR7Zm9ybWF0QmxvY2tFcnJvck1lc3NhZ2UocmVzcG9uc2UpfWAsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgcmVzcG9uc2UuZnVuY3Rpb25DYWxsKCkgaXMgZGVwcmVjYXRlZC4gYCArXG4gICAgICAgICAgICAgICAgYFVzZSByZXNwb25zZS5mdW5jdGlvbkNhbGxzKCkgaW5zdGVhZC5gKTtcbiAgICAgICAgICAgIHJldHVybiBnZXRGdW5jdGlvbkNhbGxzKHJlc3BvbnNlKVswXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXNwb25zZS5wcm9tcHRGZWVkYmFjaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEdvb2dsZUdlbmVyYXRpdmVBSVJlc3BvbnNlRXJyb3IoYEZ1bmN0aW9uIGNhbGwgbm90IGF2YWlsYWJsZS4gJHtmb3JtYXRCbG9ja0Vycm9yTWVzc2FnZShyZXNwb25zZSl9YCwgcmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICByZXNwb25zZS5mdW5jdGlvbkNhbGxzID0gKCkgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2UuY2FuZGlkYXRlcyAmJiByZXNwb25zZS5jYW5kaWRhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5jYW5kaWRhdGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFRoaXMgcmVzcG9uc2UgaGFkICR7cmVzcG9uc2UuY2FuZGlkYXRlcy5sZW5ndGh9IGAgK1xuICAgICAgICAgICAgICAgICAgICBgY2FuZGlkYXRlcy4gUmV0dXJuaW5nIGZ1bmN0aW9uIGNhbGxzIGZyb20gdGhlIGZpcnN0IGNhbmRpZGF0ZSBvbmx5LiBgICtcbiAgICAgICAgICAgICAgICAgICAgYEFjY2VzcyByZXNwb25zZS5jYW5kaWRhdGVzIGRpcmVjdGx5IHRvIHVzZSB0aGUgb3RoZXIgY2FuZGlkYXRlcy5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYWRCYWRGaW5pc2hSZWFzb24ocmVzcG9uc2UuY2FuZGlkYXRlc1swXSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJUmVzcG9uc2VFcnJvcihgJHtmb3JtYXRCbG9ja0Vycm9yTWVzc2FnZShyZXNwb25zZSl9YCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdldEZ1bmN0aW9uQ2FsbHMocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlLnByb21wdEZlZWRiYWNrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJUmVzcG9uc2VFcnJvcihgRnVuY3Rpb24gY2FsbCBub3QgYXZhaWxhYmxlLiAke2Zvcm1hdEJsb2NrRXJyb3JNZXNzYWdlKHJlc3BvbnNlKX1gLCByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn1cbi8qKlxuICogUmV0dXJucyBhbGwgdGV4dCBmb3VuZCBpbiBhbGwgcGFydHMgb2YgZmlyc3QgY2FuZGlkYXRlLlxuICovXG5mdW5jdGlvbiBnZXRUZXh0KHJlc3BvbnNlKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIGNvbnN0IHRleHRTdHJpbmdzID0gW107XG4gICAgaWYgKChfYiA9IChfYSA9IHJlc3BvbnNlLmNhbmRpZGF0ZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVswXS5jb250ZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucGFydHMpIHtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIChfZCA9IChfYyA9IHJlc3BvbnNlLmNhbmRpZGF0ZXMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY1swXS5jb250ZW50KSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QucGFydHMpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LnRleHQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0U3RyaW5ncy5wdXNoKHBhcnQudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRleHRTdHJpbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHRleHRTdHJpbmdzLmpvaW4oXCJcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgZnVuY3Rpb25DYWxsIG9mIGZpcnN0IGNhbmRpZGF0ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0RnVuY3Rpb25DYWxscyhyZXNwb25zZSkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBjb25zdCBmdW5jdGlvbkNhbGxzID0gW107XG4gICAgaWYgKChfYiA9IChfYSA9IHJlc3BvbnNlLmNhbmRpZGF0ZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVswXS5jb250ZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucGFydHMpIHtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIChfZCA9IChfYyA9IHJlc3BvbnNlLmNhbmRpZGF0ZXMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY1swXS5jb250ZW50KSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QucGFydHMpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmZ1bmN0aW9uQ2FsbCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uQ2FsbHMucHVzaChwYXJ0LmZ1bmN0aW9uQ2FsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZ1bmN0aW9uQ2FsbHMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb25DYWxscztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuY29uc3QgYmFkRmluaXNoUmVhc29ucyA9IFtGaW5pc2hSZWFzb24uUkVDSVRBVElPTiwgRmluaXNoUmVhc29uLlNBRkVUWV07XG5mdW5jdGlvbiBoYWRCYWRGaW5pc2hSZWFzb24oY2FuZGlkYXRlKSB7XG4gICAgcmV0dXJuICghIWNhbmRpZGF0ZS5maW5pc2hSZWFzb24gJiZcbiAgICAgICAgYmFkRmluaXNoUmVhc29ucy5pbmNsdWRlcyhjYW5kaWRhdGUuZmluaXNoUmVhc29uKSk7XG59XG5mdW5jdGlvbiBmb3JtYXRCbG9ja0Vycm9yTWVzc2FnZShyZXNwb25zZSkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGxldCBtZXNzYWdlID0gXCJcIjtcbiAgICBpZiAoKCFyZXNwb25zZS5jYW5kaWRhdGVzIHx8IHJlc3BvbnNlLmNhbmRpZGF0ZXMubGVuZ3RoID09PSAwKSAmJlxuICAgICAgICByZXNwb25zZS5wcm9tcHRGZWVkYmFjaykge1xuICAgICAgICBtZXNzYWdlICs9IFwiUmVzcG9uc2Ugd2FzIGJsb2NrZWRcIjtcbiAgICAgICAgaWYgKChfYSA9IHJlc3BvbnNlLnByb21wdEZlZWRiYWNrKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYmxvY2tSZWFzb24pIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gYCBkdWUgdG8gJHtyZXNwb25zZS5wcm9tcHRGZWVkYmFjay5ibG9ja1JlYXNvbn1gO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoX2IgPSByZXNwb25zZS5wcm9tcHRGZWVkYmFjaykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmJsb2NrUmVhc29uTWVzc2FnZSkge1xuICAgICAgICAgICAgbWVzc2FnZSArPSBgOiAke3Jlc3BvbnNlLnByb21wdEZlZWRiYWNrLmJsb2NrUmVhc29uTWVzc2FnZX1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKChfYyA9IHJlc3BvbnNlLmNhbmRpZGF0ZXMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY1swXSkge1xuICAgICAgICBjb25zdCBmaXJzdENhbmRpZGF0ZSA9IHJlc3BvbnNlLmNhbmRpZGF0ZXNbMF07XG4gICAgICAgIGlmIChoYWRCYWRGaW5pc2hSZWFzb24oZmlyc3RDYW5kaWRhdGUpKSB7XG4gICAgICAgICAgICBtZXNzYWdlICs9IGBDYW5kaWRhdGUgd2FzIGJsb2NrZWQgZHVlIHRvICR7Zmlyc3RDYW5kaWRhdGUuZmluaXNoUmVhc29ufWA7XG4gICAgICAgICAgICBpZiAoZmlyc3RDYW5kaWRhdGUuZmluaXNoTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gYDogJHtmaXJzdENhbmRpZGF0ZS5maW5pc2hNZXNzYWdlfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG59XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSwgU3VwcHJlc3NlZEVycm9yLCBTeW1ib2wgKi9cclxuXHJcblxyXG5mdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG50eXBlb2YgU3VwcHJlc3NlZEVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBTdXBwcmVzc2VkRXJyb3IgOiBmdW5jdGlvbiAoZXJyb3IsIHN1cHByZXNzZWQsIG1lc3NhZ2UpIHtcclxuICAgIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gICAgcmV0dXJuIGUubmFtZSA9IFwiU3VwcHJlc3NlZEVycm9yXCIsIGUuZXJyb3IgPSBlcnJvciwgZS5zdXBwcmVzc2VkID0gc3VwcHJlc3NlZCwgZTtcclxufTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IHJlc3BvbnNlTGluZVJFID0gL15kYXRhXFw6ICguKikoPzpcXG5cXG58XFxyXFxyfFxcclxcblxcclxcbikvO1xuLyoqXG4gKiBQcm9jZXNzIGEgcmVzcG9uc2UuYm9keSBzdHJlYW0gZnJvbSB0aGUgYmFja2VuZCBhbmQgcmV0dXJuIGFuXG4gKiBpdGVyYXRvciB0aGF0IHByb3ZpZGVzIG9uZSBjb21wbGV0ZSBHZW5lcmF0ZUNvbnRlbnRSZXNwb25zZSBhdCBhIHRpbWVcbiAqIGFuZCBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgc2luZ2xlIGFnZ3JlZ2F0ZWRcbiAqIEdlbmVyYXRlQ29udGVudFJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSByZXNwb25zZSAtIFJlc3BvbnNlIGZyb20gYSBmZXRjaCBjYWxsXG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NTdHJlYW0ocmVzcG9uc2UpIHtcbiAgICBjb25zdCBpbnB1dFN0cmVhbSA9IHJlc3BvbnNlLmJvZHkucGlwZVRocm91Z2gobmV3IFRleHREZWNvZGVyU3RyZWFtKFwidXRmOFwiLCB7IGZhdGFsOiB0cnVlIH0pKTtcbiAgICBjb25zdCByZXNwb25zZVN0cmVhbSA9IGdldFJlc3BvbnNlU3RyZWFtKGlucHV0U3RyZWFtKTtcbiAgICBjb25zdCBbc3RyZWFtMSwgc3RyZWFtMl0gPSByZXNwb25zZVN0cmVhbS50ZWUoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdHJlYW06IGdlbmVyYXRlUmVzcG9uc2VTZXF1ZW5jZShzdHJlYW0xKSxcbiAgICAgICAgcmVzcG9uc2U6IGdldFJlc3BvbnNlUHJvbWlzZShzdHJlYW0yKSxcbiAgICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0UmVzcG9uc2VQcm9taXNlKHN0cmVhbSkge1xuICAgIGNvbnN0IGFsbFJlc3BvbnNlcyA9IFtdO1xuICAgIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFkZEhlbHBlcnMoYWdncmVnYXRlUmVzcG9uc2VzKGFsbFJlc3BvbnNlcykpO1xuICAgICAgICB9XG4gICAgICAgIGFsbFJlc3BvbnNlcy5wdXNoKHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZW5lcmF0ZVJlc3BvbnNlU2VxdWVuY2Uoc3RyZWFtKSB7XG4gICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogZ2VuZXJhdGVSZXNwb25zZVNlcXVlbmNlXzEoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IHlpZWxkIF9fYXdhaXQocmVhZGVyLnJlYWQoKSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeWllbGQgeWllbGQgX19hd2FpdChhZGRIZWxwZXJzKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogUmVhZHMgYSByYXcgc3RyZWFtIGZyb20gdGhlIGZldGNoIHJlc3BvbnNlIGFuZCBqb2luIGluY29tcGxldGVcbiAqIGNodW5rcywgcmV0dXJuaW5nIGEgbmV3IHN0cmVhbSB0aGF0IHByb3ZpZGVzIGEgc2luZ2xlIGNvbXBsZXRlXG4gKiBHZW5lcmF0ZUNvbnRlbnRSZXNwb25zZSBpbiBlYWNoIGl0ZXJhdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVzcG9uc2VTdHJlYW0oaW5wdXRTdHJlYW0pIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dFN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICBjb25zdCBzdHJlYW0gPSBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgICAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudFRleHQgPSBcIlwiO1xuICAgICAgICAgICAgcmV0dXJuIHB1bXAoKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHB1bXAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkKCkudGhlbigoeyB2YWx1ZSwgZG9uZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFRleHQudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lcnJvcihuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2Ugc3RyZWFtXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRleHQgKz0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaCA9IGN1cnJlbnRUZXh0Lm1hdGNoKHJlc3BvbnNlTGluZVJFKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcnNlZFJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkUmVzcG9uc2UgPSBKU09OLnBhcnNlKG1hdGNoWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lcnJvcihuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3IoYEVycm9yIHBhcnNpbmcgSlNPTiByZXNwb25zZTogXCIke21hdGNoWzFdfVwiYCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShwYXJzZWRSZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGV4dCA9IGN1cnJlbnRUZXh0LnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBjdXJyZW50VGV4dC5tYXRjaChyZXNwb25zZUxpbmVSRSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHB1bXAoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gc3RyZWFtO1xufVxuLyoqXG4gKiBBZ2dyZWdhdGVzIGFuIGFycmF5IG9mIGBHZW5lcmF0ZUNvbnRlbnRSZXNwb25zZWBzIGludG8gYSBzaW5nbGVcbiAqIEdlbmVyYXRlQ29udGVudFJlc3BvbnNlLlxuICovXG5mdW5jdGlvbiBhZ2dyZWdhdGVSZXNwb25zZXMocmVzcG9uc2VzKSB7XG4gICAgY29uc3QgbGFzdFJlc3BvbnNlID0gcmVzcG9uc2VzW3Jlc3BvbnNlcy5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBhZ2dyZWdhdGVkUmVzcG9uc2UgPSB7XG4gICAgICAgIHByb21wdEZlZWRiYWNrOiBsYXN0UmVzcG9uc2UgPT09IG51bGwgfHwgbGFzdFJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsYXN0UmVzcG9uc2UucHJvbXB0RmVlZGJhY2ssXG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IHJlc3BvbnNlIG9mIHJlc3BvbnNlcykge1xuICAgICAgICBpZiAocmVzcG9uc2UuY2FuZGlkYXRlcykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBjYW5kaWRhdGUgb2YgcmVzcG9uc2UuY2FuZGlkYXRlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBjYW5kaWRhdGUuaW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKCFhZ2dyZWdhdGVkUmVzcG9uc2UuY2FuZGlkYXRlcykge1xuICAgICAgICAgICAgICAgICAgICBhZ2dyZWdhdGVkUmVzcG9uc2UuY2FuZGlkYXRlcyA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWFnZ3JlZ2F0ZWRSZXNwb25zZS5jYW5kaWRhdGVzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGFnZ3JlZ2F0ZWRSZXNwb25zZS5jYW5kaWRhdGVzW2ldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGNhbmRpZGF0ZS5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gS2VlcCBvdmVyd3JpdGluZywgdGhlIGxhc3Qgb25lIHdpbGwgYmUgZmluYWxcbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGVkUmVzcG9uc2UuY2FuZGlkYXRlc1tpXS5jaXRhdGlvbk1ldGFkYXRhID1cbiAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlLmNpdGF0aW9uTWV0YWRhdGE7XG4gICAgICAgICAgICAgICAgYWdncmVnYXRlZFJlc3BvbnNlLmNhbmRpZGF0ZXNbaV0uZmluaXNoUmVhc29uID0gY2FuZGlkYXRlLmZpbmlzaFJlYXNvbjtcbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGVkUmVzcG9uc2UuY2FuZGlkYXRlc1tpXS5maW5pc2hNZXNzYWdlID1cbiAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlLmZpbmlzaE1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgYWdncmVnYXRlZFJlc3BvbnNlLmNhbmRpZGF0ZXNbaV0uc2FmZXR5UmF0aW5ncyA9XG4gICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZS5zYWZldHlSYXRpbmdzO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIENhbmRpZGF0ZXMgc2hvdWxkIGFsd2F5cyBoYXZlIGNvbnRlbnQgYW5kIHBhcnRzLCBidXQgdGhpcyBoYW5kbGVzXG4gICAgICAgICAgICAgICAgICogcG9zc2libGUgbWFsZm9ybWVkIHJlc3BvbnNlcy5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAoY2FuZGlkYXRlLmNvbnRlbnQgJiYgY2FuZGlkYXRlLmNvbnRlbnQucGFydHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhZ2dyZWdhdGVkUmVzcG9uc2UuY2FuZGlkYXRlc1tpXS5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZ2dyZWdhdGVkUmVzcG9uc2UuY2FuZGlkYXRlc1tpXS5jb250ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6IGNhbmRpZGF0ZS5jb250ZW50LnJvbGUgfHwgXCJ1c2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdQYXJ0ID0ge307XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFydCBvZiBjYW5kaWRhdGUuY29udGVudC5wYXJ0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnQudGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1BhcnQudGV4dCA9IHBhcnQudGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LmZ1bmN0aW9uQ2FsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1BhcnQuZnVuY3Rpb25DYWxsID0gcGFydC5mdW5jdGlvbkNhbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMobmV3UGFydCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGFydC50ZXh0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFnZ3JlZ2F0ZWRSZXNwb25zZS5jYW5kaWRhdGVzW2ldLmNvbnRlbnQucGFydHMucHVzaChuZXdQYXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWdncmVnYXRlZFJlc3BvbnNlO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVDb250ZW50U3RyZWFtKGFwaUtleSwgbW9kZWwsIHBhcmFtcywgcmVxdWVzdE9wdGlvbnMpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG1ha2VSZXF1ZXN0KG1vZGVsLCBUYXNrLlNUUkVBTV9HRU5FUkFURV9DT05URU5ULCBhcGlLZXksIFxuICAgIC8qIHN0cmVhbSAqLyB0cnVlLCBKU09OLnN0cmluZ2lmeShwYXJhbXMpLCByZXF1ZXN0T3B0aW9ucyk7XG4gICAgcmV0dXJuIHByb2Nlc3NTdHJlYW0ocmVzcG9uc2UpO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVDb250ZW50KGFwaUtleSwgbW9kZWwsIHBhcmFtcywgcmVxdWVzdE9wdGlvbnMpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG1ha2VSZXF1ZXN0KG1vZGVsLCBUYXNrLkdFTkVSQVRFX0NPTlRFTlQsIGFwaUtleSwgXG4gICAgLyogc3RyZWFtICovIGZhbHNlLCBKU09OLnN0cmluZ2lmeShwYXJhbXMpLCByZXF1ZXN0T3B0aW9ucyk7XG4gICAgY29uc3QgcmVzcG9uc2VKc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIGNvbnN0IGVuaGFuY2VkUmVzcG9uc2UgPSBhZGRIZWxwZXJzKHJlc3BvbnNlSnNvbik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzcG9uc2U6IGVuaGFuY2VkUmVzcG9uc2UsXG4gICAgfTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFN5c3RlbUluc3RydWN0aW9uKGlucHV0KSB7XG4gICAgLy8gbnVsbCBvciB1bmRlZmluZWRcbiAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHsgcm9sZTogXCJzeXN0ZW1cIiwgcGFydHM6IFt7IHRleHQ6IGlucHV0IH1dIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlucHV0LnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHsgcm9sZTogXCJzeXN0ZW1cIiwgcGFydHM6IFtpbnB1dF0gfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaW5wdXQucGFydHMpIHtcbiAgICAgICAgaWYgKCFpbnB1dC5yb2xlKSB7XG4gICAgICAgICAgICByZXR1cm4geyByb2xlOiBcInN5c3RlbVwiLCBwYXJ0czogaW5wdXQucGFydHMgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGZvcm1hdE5ld0NvbnRlbnQocmVxdWVzdCkge1xuICAgIGxldCBuZXdQYXJ0cyA9IFtdO1xuICAgIGlmICh0eXBlb2YgcmVxdWVzdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBuZXdQYXJ0cyA9IFt7IHRleHQ6IHJlcXVlc3QgfV07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnRPclN0cmluZyBvZiByZXF1ZXN0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcnRPclN0cmluZyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIG5ld1BhcnRzLnB1c2goeyB0ZXh0OiBwYXJ0T3JTdHJpbmcgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdQYXJ0cy5wdXNoKHBhcnRPclN0cmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFzc2lnblJvbGVUb1BhcnRzQW5kVmFsaWRhdGVTZW5kTWVzc2FnZVJlcXVlc3QobmV3UGFydHMpO1xufVxuLyoqXG4gKiBXaGVuIG11bHRpcGxlIFBhcnQgdHlwZXMgKGkuZS4gRnVuY3Rpb25SZXNwb25zZVBhcnQgYW5kIFRleHRQYXJ0KSBhcmVcbiAqIHBhc3NlZCBpbiBhIHNpbmdsZSBQYXJ0IGFycmF5LCB3ZSBtYXkgbmVlZCB0byBhc3NpZ24gZGlmZmVyZW50IHJvbGVzIHRvIGVhY2hcbiAqIHBhcnQuIEN1cnJlbnRseSBvbmx5IEZ1bmN0aW9uUmVzcG9uc2VQYXJ0IHJlcXVpcmVzIGEgcm9sZSBvdGhlciB0aGFuICd1c2VyJy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gcGFydHMgQXJyYXkgb2YgcGFydHMgdG8gcGFzcyB0byB0aGUgbW9kZWxcbiAqIEByZXR1cm5zIEFycmF5IG9mIGNvbnRlbnQgaXRlbXNcbiAqL1xuZnVuY3Rpb24gYXNzaWduUm9sZVRvUGFydHNBbmRWYWxpZGF0ZVNlbmRNZXNzYWdlUmVxdWVzdChwYXJ0cykge1xuICAgIGNvbnN0IHVzZXJDb250ZW50ID0geyByb2xlOiBcInVzZXJcIiwgcGFydHM6IFtdIH07XG4gICAgY29uc3QgZnVuY3Rpb25Db250ZW50ID0geyByb2xlOiBcImZ1bmN0aW9uXCIsIHBhcnRzOiBbXSB9O1xuICAgIGxldCBoYXNVc2VyQ29udGVudCA9IGZhbHNlO1xuICAgIGxldCBoYXNGdW5jdGlvbkNvbnRlbnQgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpIHtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25SZXNwb25zZVwiIGluIHBhcnQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uQ29udGVudC5wYXJ0cy5wdXNoKHBhcnQpO1xuICAgICAgICAgICAgaGFzRnVuY3Rpb25Db250ZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHVzZXJDb250ZW50LnBhcnRzLnB1c2gocGFydCk7XG4gICAgICAgICAgICBoYXNVc2VyQ29udGVudCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGhhc1VzZXJDb250ZW50ICYmIGhhc0Z1bmN0aW9uQ29udGVudCkge1xuICAgICAgICB0aHJvdyBuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3IoXCJXaXRoaW4gYSBzaW5nbGUgbWVzc2FnZSwgRnVuY3Rpb25SZXNwb25zZSBjYW5ub3QgYmUgbWl4ZWQgd2l0aCBvdGhlciB0eXBlIG9mIHBhcnQgaW4gdGhlIHJlcXVlc3QgZm9yIHNlbmRpbmcgY2hhdCBtZXNzYWdlLlwiKTtcbiAgICB9XG4gICAgaWYgKCFoYXNVc2VyQ29udGVudCAmJiAhaGFzRnVuY3Rpb25Db250ZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBHb29nbGVHZW5lcmF0aXZlQUlFcnJvcihcIk5vIGNvbnRlbnQgaXMgcHJvdmlkZWQgZm9yIHNlbmRpbmcgY2hhdCBtZXNzYWdlLlwiKTtcbiAgICB9XG4gICAgaWYgKGhhc1VzZXJDb250ZW50KSB7XG4gICAgICAgIHJldHVybiB1c2VyQ29udGVudDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uQ29udGVudDtcbn1cbmZ1bmN0aW9uIGZvcm1hdEdlbmVyYXRlQ29udGVudElucHV0KHBhcmFtcykge1xuICAgIGxldCBmb3JtYXR0ZWRSZXF1ZXN0O1xuICAgIGlmIChwYXJhbXMuY29udGVudHMpIHtcbiAgICAgICAgZm9ybWF0dGVkUmVxdWVzdCA9IHBhcmFtcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIEFycmF5IG9yIHN0cmluZ1xuICAgICAgICBjb25zdCBjb250ZW50ID0gZm9ybWF0TmV3Q29udGVudChwYXJhbXMpO1xuICAgICAgICBmb3JtYXR0ZWRSZXF1ZXN0ID0geyBjb250ZW50czogW2NvbnRlbnRdIH07XG4gICAgfVxuICAgIGlmIChwYXJhbXMuc3lzdGVtSW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgZm9ybWF0dGVkUmVxdWVzdC5zeXN0ZW1JbnN0cnVjdGlvbiA9IGZvcm1hdFN5c3RlbUluc3RydWN0aW9uKHBhcmFtcy5zeXN0ZW1JbnN0cnVjdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXR0ZWRSZXF1ZXN0O1xufVxuZnVuY3Rpb24gZm9ybWF0RW1iZWRDb250ZW50SW5wdXQocGFyYW1zKSB7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShwYXJhbXMpKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBmb3JtYXROZXdDb250ZW50KHBhcmFtcyk7XG4gICAgICAgIHJldHVybiB7IGNvbnRlbnQgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcmFtcztcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIGh0dHBzOi8vYWkuZ29vZ2xlLmRldi9hcGkvcmVzdC92MWJldGEvQ29udGVudCNwYXJ0XG5jb25zdCBWQUxJRF9QQVJUX0ZJRUxEUyA9IFtcbiAgICBcInRleHRcIixcbiAgICBcImlubGluZURhdGFcIixcbiAgICBcImZ1bmN0aW9uQ2FsbFwiLFxuICAgIFwiZnVuY3Rpb25SZXNwb25zZVwiLFxuXTtcbmNvbnN0IFZBTElEX1BBUlRTX1BFUl9ST0xFID0ge1xuICAgIHVzZXI6IFtcInRleHRcIiwgXCJpbmxpbmVEYXRhXCJdLFxuICAgIGZ1bmN0aW9uOiBbXCJmdW5jdGlvblJlc3BvbnNlXCJdLFxuICAgIG1vZGVsOiBbXCJ0ZXh0XCIsIFwiZnVuY3Rpb25DYWxsXCJdLFxuICAgIC8vIFN5c3RlbSBpbnN0cnVjdGlvbnMgc2hvdWxkbid0IGJlIGluIGhpc3RvcnkgYW55d2F5LlxuICAgIHN5c3RlbTogW1widGV4dFwiXSxcbn07XG5mdW5jdGlvbiB2YWxpZGF0ZUNoYXRIaXN0b3J5KGhpc3RvcnkpIHtcbiAgICBsZXQgcHJldkNvbnRlbnQgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGN1cnJDb250ZW50IG9mIGhpc3RvcnkpIHtcbiAgICAgICAgY29uc3QgeyByb2xlLCBwYXJ0cyB9ID0gY3VyckNvbnRlbnQ7XG4gICAgICAgIGlmICghcHJldkNvbnRlbnQgJiYgcm9sZSAhPT0gXCJ1c2VyXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBHb29nbGVHZW5lcmF0aXZlQUlFcnJvcihgRmlyc3QgY29udGVudCBzaG91bGQgYmUgd2l0aCByb2xlICd1c2VyJywgZ290ICR7cm9sZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIVBPU1NJQkxFX1JPTEVTLmluY2x1ZGVzKHJvbGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3IoYEVhY2ggaXRlbSBzaG91bGQgaW5jbHVkZSByb2xlIGZpZWxkLiBHb3QgJHtyb2xlfSBidXQgdmFsaWQgcm9sZXMgYXJlOiAke0pTT04uc3RyaW5naWZ5KFBPU1NJQkxFX1JPTEVTKX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocGFydHMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3IoXCJDb250ZW50IHNob3VsZCBoYXZlICdwYXJ0cycgcHJvcGVydHkgd2l0aCBhbiBhcnJheSBvZiBQYXJ0c1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3IoXCJFYWNoIENvbnRlbnQgc2hvdWxkIGhhdmUgYXQgbGVhc3Qgb25lIHBhcnRcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY291bnRGaWVsZHMgPSB7XG4gICAgICAgICAgICB0ZXh0OiAwLFxuICAgICAgICAgICAgaW5saW5lRGF0YTogMCxcbiAgICAgICAgICAgIGZ1bmN0aW9uQ2FsbDogMCxcbiAgICAgICAgICAgIGZ1bmN0aW9uUmVzcG9uc2U6IDAsXG4gICAgICAgICAgICBmaWxlRGF0YTogMCxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBWQUxJRF9QQVJUX0ZJRUxEUykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gcGFydCkge1xuICAgICAgICAgICAgICAgICAgICBjb3VudEZpZWxkc1trZXldICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbGlkUGFydHMgPSBWQUxJRF9QQVJUU19QRVJfUk9MRVtyb2xlXTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgVkFMSURfUEFSVF9GSUVMRFMpIHtcbiAgICAgICAgICAgIGlmICghdmFsaWRQYXJ0cy5pbmNsdWRlcyhrZXkpICYmIGNvdW50RmllbGRzW2tleV0gPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEdvb2dsZUdlbmVyYXRpdmVBSUVycm9yKGBDb250ZW50IHdpdGggcm9sZSAnJHtyb2xlfScgY2FuJ3QgY29udGFpbiAnJHtrZXl9JyBwYXJ0YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJldkNvbnRlbnQgPSB0cnVlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogRG8gbm90IGxvZyBhIG1lc3NhZ2UgZm9yIHRoaXMgZXJyb3IuXG4gKi9cbmNvbnN0IFNJTEVOVF9FUlJPUiA9IFwiU0lMRU5UX0VSUk9SXCI7XG4vKipcbiAqIENoYXRTZXNzaW9uIGNsYXNzIHRoYXQgZW5hYmxlcyBzZW5kaW5nIGNoYXQgbWVzc2FnZXMgYW5kIHN0b3Jlc1xuICogaGlzdG9yeSBvZiBzZW50IGFuZCByZWNlaXZlZCBtZXNzYWdlcyBzbyBmYXIuXG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBDaGF0U2Vzc2lvbiB7XG4gICAgY29uc3RydWN0b3IoYXBpS2V5LCBtb2RlbCwgcGFyYW1zLCByZXF1ZXN0T3B0aW9ucykge1xuICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWw7XG4gICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgICAgICB0aGlzLnJlcXVlc3RPcHRpb25zID0gcmVxdWVzdE9wdGlvbnM7XG4gICAgICAgIHRoaXMuX2hpc3RvcnkgPSBbXTtcbiAgICAgICAgdGhpcy5fc2VuZFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgdGhpcy5fYXBpS2V5ID0gYXBpS2V5O1xuICAgICAgICBpZiAocGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmhpc3RvcnkpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlQ2hhdEhpc3RvcnkocGFyYW1zLmhpc3RvcnkpO1xuICAgICAgICAgICAgdGhpcy5faGlzdG9yeSA9IHBhcmFtcy5oaXN0b3J5O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGNoYXQgaGlzdG9yeSBzbyBmYXIuIEJsb2NrZWQgcHJvbXB0cyBhcmUgbm90IGFkZGVkIHRvIGhpc3RvcnkuXG4gICAgICogQmxvY2tlZCBjYW5kaWRhdGVzIGFyZSBub3QgYWRkZWQgdG8gaGlzdG9yeSwgbm9yIGFyZSB0aGUgcHJvbXB0cyB0aGF0XG4gICAgICogZ2VuZXJhdGVkIHRoZW0uXG4gICAgICovXG4gICAgYXN5bmMgZ2V0SGlzdG9yeSgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5fc2VuZFByb21pc2U7XG4gICAgICAgIHJldHVybiB0aGlzLl9oaXN0b3J5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIGNoYXQgbWVzc2FnZSBhbmQgcmVjZWl2ZXMgYSBub24tc3RyZWFtaW5nXG4gICAgICoge0BsaW5rIEdlbmVyYXRlQ29udGVudFJlc3VsdH1cbiAgICAgKi9cbiAgICBhc3luYyBzZW5kTWVzc2FnZShyZXF1ZXN0KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgIGF3YWl0IHRoaXMuX3NlbmRQcm9taXNlO1xuICAgICAgICBjb25zdCBuZXdDb250ZW50ID0gZm9ybWF0TmV3Q29udGVudChyZXF1ZXN0KTtcbiAgICAgICAgY29uc3QgZ2VuZXJhdGVDb250ZW50UmVxdWVzdCA9IHtcbiAgICAgICAgICAgIHNhZmV0eVNldHRpbmdzOiAoX2EgPSB0aGlzLnBhcmFtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNhZmV0eVNldHRpbmdzLFxuICAgICAgICAgICAgZ2VuZXJhdGlvbkNvbmZpZzogKF9iID0gdGhpcy5wYXJhbXMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5nZW5lcmF0aW9uQ29uZmlnLFxuICAgICAgICAgICAgdG9vbHM6IChfYyA9IHRoaXMucGFyYW1zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudG9vbHMsXG4gICAgICAgICAgICB0b29sQ29uZmlnOiAoX2QgPSB0aGlzLnBhcmFtcykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnRvb2xDb25maWcsXG4gICAgICAgICAgICBzeXN0ZW1JbnN0cnVjdGlvbjogKF9lID0gdGhpcy5wYXJhbXMpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5zeXN0ZW1JbnN0cnVjdGlvbixcbiAgICAgICAgICAgIGNvbnRlbnRzOiBbLi4udGhpcy5faGlzdG9yeSwgbmV3Q29udGVudF0sXG4gICAgICAgIH07XG4gICAgICAgIGxldCBmaW5hbFJlc3VsdDtcbiAgICAgICAgLy8gQWRkIG9udG8gdGhlIGNoYWluLlxuICAgICAgICB0aGlzLl9zZW5kUHJvbWlzZSA9IHRoaXMuX3NlbmRQcm9taXNlXG4gICAgICAgICAgICAudGhlbigoKSA9PiBnZW5lcmF0ZUNvbnRlbnQodGhpcy5fYXBpS2V5LCB0aGlzLm1vZGVsLCBnZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0LCB0aGlzLnJlcXVlc3RPcHRpb25zKSlcbiAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQucmVzcG9uc2UuY2FuZGlkYXRlcyAmJlxuICAgICAgICAgICAgICAgIHJlc3VsdC5yZXNwb25zZS5jYW5kaWRhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oaXN0b3J5LnB1c2gobmV3Q29udGVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VDb250ZW50ID0gT2JqZWN0LmFzc2lnbih7IHBhcnRzOiBbXSwgXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc3BvbnNlIHNlZW1zIHRvIGNvbWUgYmFjayB3aXRob3V0IGEgcm9sZSBzZXQuXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6IFwibW9kZWxcIiB9LCAoX2EgPSByZXN1bHQucmVzcG9uc2UuY2FuZGlkYXRlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hWzBdLmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2hpc3RvcnkucHVzaChyZXNwb25zZUNvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmxvY2tFcnJvck1lc3NhZ2UgPSBmb3JtYXRCbG9ja0Vycm9yTWVzc2FnZShyZXN1bHQucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGlmIChibG9ja0Vycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYHNlbmRNZXNzYWdlKCkgd2FzIHVuc3VjY2Vzc2Z1bC4gJHtibG9ja0Vycm9yTWVzc2FnZX0uIEluc3BlY3QgcmVzcG9uc2Ugb2JqZWN0IGZvciBkZXRhaWxzLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsUmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgdGhpcy5fc2VuZFByb21pc2U7XG4gICAgICAgIHJldHVybiBmaW5hbFJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBjaGF0IG1lc3NhZ2UgYW5kIHJlY2VpdmVzIHRoZSByZXNwb25zZSBhcyBhXG4gICAgICoge0BsaW5rIEdlbmVyYXRlQ29udGVudFN0cmVhbVJlc3VsdH0gY29udGFpbmluZyBhbiBpdGVyYWJsZSBzdHJlYW1cbiAgICAgKiBhbmQgYSByZXNwb25zZSBwcm9taXNlLlxuICAgICAqL1xuICAgIGFzeW5jIHNlbmRNZXNzYWdlU3RyZWFtKHJlcXVlc3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgYXdhaXQgdGhpcy5fc2VuZFByb21pc2U7XG4gICAgICAgIGNvbnN0IG5ld0NvbnRlbnQgPSBmb3JtYXROZXdDb250ZW50KHJlcXVlc3QpO1xuICAgICAgICBjb25zdCBnZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgc2FmZXR5U2V0dGluZ3M6IChfYSA9IHRoaXMucGFyYW1zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2FmZXR5U2V0dGluZ3MsXG4gICAgICAgICAgICBnZW5lcmF0aW9uQ29uZmlnOiAoX2IgPSB0aGlzLnBhcmFtcykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmdlbmVyYXRpb25Db25maWcsXG4gICAgICAgICAgICB0b29sczogKF9jID0gdGhpcy5wYXJhbXMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy50b29scyxcbiAgICAgICAgICAgIHRvb2xDb25maWc6IChfZCA9IHRoaXMucGFyYW1zKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QudG9vbENvbmZpZyxcbiAgICAgICAgICAgIHN5c3RlbUluc3RydWN0aW9uOiAoX2UgPSB0aGlzLnBhcmFtcykgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLnN5c3RlbUluc3RydWN0aW9uLFxuICAgICAgICAgICAgY29udGVudHM6IFsuLi50aGlzLl9oaXN0b3J5LCBuZXdDb250ZW50XSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3RyZWFtUHJvbWlzZSA9IGdlbmVyYXRlQ29udGVudFN0cmVhbSh0aGlzLl9hcGlLZXksIHRoaXMubW9kZWwsIGdlbmVyYXRlQ29udGVudFJlcXVlc3QsIHRoaXMucmVxdWVzdE9wdGlvbnMpO1xuICAgICAgICAvLyBBZGQgb250byB0aGUgY2hhaW4uXG4gICAgICAgIHRoaXMuX3NlbmRQcm9taXNlID0gdGhpcy5fc2VuZFByb21pc2VcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHN0cmVhbVByb21pc2UpXG4gICAgICAgICAgICAvLyBUaGlzIG11c3QgYmUgaGFuZGxlZCB0byBhdm9pZCB1bmhhbmRsZWQgcmVqZWN0aW9uLCBidXQganVtcFxuICAgICAgICAgICAgLy8gdG8gdGhlIGZpbmFsIGNhdGNoIGJsb2NrIHdpdGggYSBsYWJlbCB0byBub3QgbG9nIHRoaXMgZXJyb3IuXG4gICAgICAgICAgICAuY2F0Y2goKF9pZ25vcmVkKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoU0lMRU5UX0VSUk9SKTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChzdHJlYW1SZXN1bHQpID0+IHN0cmVhbVJlc3VsdC5yZXNwb25zZSlcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmNhbmRpZGF0ZXMgJiYgcmVzcG9uc2UuY2FuZGlkYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGlzdG9yeS5wdXNoKG5ld0NvbnRlbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlQ29udGVudCA9IE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmNhbmRpZGF0ZXNbMF0uY29udGVudCk7XG4gICAgICAgICAgICAgICAgLy8gUmVzcG9uc2Ugc2VlbXMgdG8gY29tZSBiYWNrIHdpdGhvdXQgYSByb2xlIHNldC5cbiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlQ29udGVudC5yb2xlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlQ29udGVudC5yb2xlID0gXCJtb2RlbFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9oaXN0b3J5LnB1c2gocmVzcG9uc2VDb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrRXJyb3JNZXNzYWdlID0gZm9ybWF0QmxvY2tFcnJvck1lc3NhZ2UocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGlmIChibG9ja0Vycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYHNlbmRNZXNzYWdlU3RyZWFtKCkgd2FzIHVuc3VjY2Vzc2Z1bC4gJHtibG9ja0Vycm9yTWVzc2FnZX0uIEluc3BlY3QgcmVzcG9uc2Ugb2JqZWN0IGZvciBkZXRhaWxzLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgLy8gRXJyb3JzIGluIHN0cmVhbVByb21pc2UgYXJlIGFscmVhZHkgY2F0Y2hhYmxlIGJ5IHRoZSB1c2VyIGFzXG4gICAgICAgICAgICAvLyBzdHJlYW1Qcm9taXNlIGlzIHJldHVybmVkLlxuICAgICAgICAgICAgLy8gQXZvaWQgZHVwbGljYXRpbmcgdGhlIGVycm9yIG1lc3NhZ2UgaW4gbG9ncy5cbiAgICAgICAgICAgIGlmIChlLm1lc3NhZ2UgIT09IFNJTEVOVF9FUlJPUikge1xuICAgICAgICAgICAgICAgIC8vIFVzZXJzIGRvIG5vdCBoYXZlIGFjY2VzcyB0byBfc2VuZFByb21pc2UgdG8gY2F0Y2ggZXJyb3JzXG4gICAgICAgICAgICAgICAgLy8gZG93bnN0cmVhbSBmcm9tIHN0cmVhbVByb21pc2UsIHNvIHRoZXkgc2hvdWxkIG5vdCB0aHJvdy5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN0cmVhbVByb21pc2U7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY291bnRUb2tlbnMoYXBpS2V5LCBtb2RlbCwgcGFyYW1zLCByZXF1ZXN0T3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbWFrZVJlcXVlc3QobW9kZWwsIFRhc2suQ09VTlRfVE9LRU5TLCBhcGlLZXksIGZhbHNlLCBKU09OLnN0cmluZ2lmeShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBhcmFtcyksIHsgbW9kZWwgfSkpLCByZXF1ZXN0T3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGVtYmVkQ29udGVudChhcGlLZXksIG1vZGVsLCBwYXJhbXMsIHJlcXVlc3RPcHRpb25zKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBtYWtlUmVxdWVzdChtb2RlbCwgVGFzay5FTUJFRF9DT05URU5ULCBhcGlLZXksIGZhbHNlLCBKU09OLnN0cmluZ2lmeShwYXJhbXMpLCByZXF1ZXN0T3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGJhdGNoRW1iZWRDb250ZW50cyhhcGlLZXksIG1vZGVsLCBwYXJhbXMsIHJlcXVlc3RPcHRpb25zKSB7XG4gICAgY29uc3QgcmVxdWVzdHNXaXRoTW9kZWwgPSBwYXJhbXMucmVxdWVzdHMubWFwKChyZXF1ZXN0KSA9PiB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlcXVlc3QpLCB7IG1vZGVsIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbWFrZVJlcXVlc3QobW9kZWwsIFRhc2suQkFUQ0hfRU1CRURfQ09OVEVOVFMsIGFwaUtleSwgZmFsc2UsIEpTT04uc3RyaW5naWZ5KHsgcmVxdWVzdHM6IHJlcXVlc3RzV2l0aE1vZGVsIH0pLCByZXF1ZXN0T3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ2xhc3MgZm9yIGdlbmVyYXRpdmUgbW9kZWwgQVBJcy5cbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgR2VuZXJhdGl2ZU1vZGVsIHtcbiAgICBjb25zdHJ1Y3RvcihhcGlLZXksIG1vZGVsUGFyYW1zLCByZXF1ZXN0T3B0aW9ucykge1xuICAgICAgICB0aGlzLmFwaUtleSA9IGFwaUtleTtcbiAgICAgICAgaWYgKG1vZGVsUGFyYW1zLm1vZGVsLmluY2x1ZGVzKFwiL1wiKSkge1xuICAgICAgICAgICAgLy8gTW9kZWxzIG1heSBiZSBuYW1lZCBcIm1vZGVscy9tb2RlbC1uYW1lXCIgb3IgXCJ0dW5lZE1vZGVscy9tb2RlbC1uYW1lXCJcbiAgICAgICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbFBhcmFtcy5tb2RlbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIElmIHBhdGggaXMgbm90IGluY2x1ZGVkLCBhc3N1bWUgaXQncyBhIG5vbi10dW5lZCBtb2RlbC5cbiAgICAgICAgICAgIHRoaXMubW9kZWwgPSBgbW9kZWxzLyR7bW9kZWxQYXJhbXMubW9kZWx9YDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdlbmVyYXRpb25Db25maWcgPSBtb2RlbFBhcmFtcy5nZW5lcmF0aW9uQ29uZmlnIHx8IHt9O1xuICAgICAgICB0aGlzLnNhZmV0eVNldHRpbmdzID0gbW9kZWxQYXJhbXMuc2FmZXR5U2V0dGluZ3MgfHwgW107XG4gICAgICAgIHRoaXMudG9vbHMgPSBtb2RlbFBhcmFtcy50b29scztcbiAgICAgICAgdGhpcy50b29sQ29uZmlnID0gbW9kZWxQYXJhbXMudG9vbENvbmZpZztcbiAgICAgICAgdGhpcy5zeXN0ZW1JbnN0cnVjdGlvbiA9IGZvcm1hdFN5c3RlbUluc3RydWN0aW9uKG1vZGVsUGFyYW1zLnN5c3RlbUluc3RydWN0aW9uKTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0T3B0aW9ucyA9IHJlcXVlc3RPcHRpb25zIHx8IHt9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYWtlcyBhIHNpbmdsZSBub24tc3RyZWFtaW5nIGNhbGwgdG8gdGhlIG1vZGVsXG4gICAgICogYW5kIHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYSBzaW5nbGUge0BsaW5rIEdlbmVyYXRlQ29udGVudFJlc3BvbnNlfS5cbiAgICAgKi9cbiAgICBhc3luYyBnZW5lcmF0ZUNvbnRlbnQocmVxdWVzdCkge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRQYXJhbXMgPSBmb3JtYXRHZW5lcmF0ZUNvbnRlbnRJbnB1dChyZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlQ29udGVudCh0aGlzLmFwaUtleSwgdGhpcy5tb2RlbCwgT2JqZWN0LmFzc2lnbih7IGdlbmVyYXRpb25Db25maWc6IHRoaXMuZ2VuZXJhdGlvbkNvbmZpZywgc2FmZXR5U2V0dGluZ3M6IHRoaXMuc2FmZXR5U2V0dGluZ3MsIHRvb2xzOiB0aGlzLnRvb2xzLCB0b29sQ29uZmlnOiB0aGlzLnRvb2xDb25maWcsIHN5c3RlbUluc3RydWN0aW9uOiB0aGlzLnN5c3RlbUluc3RydWN0aW9uIH0sIGZvcm1hdHRlZFBhcmFtcyksIHRoaXMucmVxdWVzdE9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYWtlcyBhIHNpbmdsZSBzdHJlYW1pbmcgY2FsbCB0byB0aGUgbW9kZWxcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyBhbiBpdGVyYWJsZSBzdHJlYW0gdGhhdCBpdGVyYXRlc1xuICAgICAqIG92ZXIgYWxsIGNodW5rcyBpbiB0aGUgc3RyZWFtaW5nIHJlc3BvbnNlIGFzIHdlbGwgYXNcbiAgICAgKiBhIHByb21pc2UgdGhhdCByZXR1cm5zIHRoZSBmaW5hbCBhZ2dyZWdhdGVkIHJlc3BvbnNlLlxuICAgICAqL1xuICAgIGFzeW5jIGdlbmVyYXRlQ29udGVudFN0cmVhbShyZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZFBhcmFtcyA9IGZvcm1hdEdlbmVyYXRlQ29udGVudElucHV0KHJlcXVlc3QpO1xuICAgICAgICByZXR1cm4gZ2VuZXJhdGVDb250ZW50U3RyZWFtKHRoaXMuYXBpS2V5LCB0aGlzLm1vZGVsLCBPYmplY3QuYXNzaWduKHsgZ2VuZXJhdGlvbkNvbmZpZzogdGhpcy5nZW5lcmF0aW9uQ29uZmlnLCBzYWZldHlTZXR0aW5nczogdGhpcy5zYWZldHlTZXR0aW5ncywgdG9vbHM6IHRoaXMudG9vbHMsIHRvb2xDb25maWc6IHRoaXMudG9vbENvbmZpZywgc3lzdGVtSW5zdHJ1Y3Rpb246IHRoaXMuc3lzdGVtSW5zdHJ1Y3Rpb24gfSwgZm9ybWF0dGVkUGFyYW1zKSwgdGhpcy5yZXF1ZXN0T3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcge0BsaW5rIENoYXRTZXNzaW9ufSBpbnN0YW5jZSB3aGljaCBjYW4gYmUgdXNlZCBmb3JcbiAgICAgKiBtdWx0aS10dXJuIGNoYXRzLlxuICAgICAqL1xuICAgIHN0YXJ0Q2hhdChzdGFydENoYXRQYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDaGF0U2Vzc2lvbih0aGlzLmFwaUtleSwgdGhpcy5tb2RlbCwgT2JqZWN0LmFzc2lnbih7IGdlbmVyYXRpb25Db25maWc6IHRoaXMuZ2VuZXJhdGlvbkNvbmZpZywgc2FmZXR5U2V0dGluZ3M6IHRoaXMuc2FmZXR5U2V0dGluZ3MsIHRvb2xzOiB0aGlzLnRvb2xzLCB0b29sQ29uZmlnOiB0aGlzLnRvb2xDb25maWcsIHN5c3RlbUluc3RydWN0aW9uOiB0aGlzLnN5c3RlbUluc3RydWN0aW9uIH0sIHN0YXJ0Q2hhdFBhcmFtcyksIHRoaXMucmVxdWVzdE9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3VudHMgdGhlIHRva2VucyBpbiB0aGUgcHJvdmlkZWQgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBhc3luYyBjb3VudFRva2VucyhyZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZFBhcmFtcyA9IGZvcm1hdEdlbmVyYXRlQ29udGVudElucHV0KHJlcXVlc3QpO1xuICAgICAgICByZXR1cm4gY291bnRUb2tlbnModGhpcy5hcGlLZXksIHRoaXMubW9kZWwsIGZvcm1hdHRlZFBhcmFtcywgdGhpcy5yZXF1ZXN0T3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVtYmVkcyB0aGUgcHJvdmlkZWQgY29udGVudC5cbiAgICAgKi9cbiAgICBhc3luYyBlbWJlZENvbnRlbnQocmVxdWVzdCkge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRQYXJhbXMgPSBmb3JtYXRFbWJlZENvbnRlbnRJbnB1dChyZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIGVtYmVkQ29udGVudCh0aGlzLmFwaUtleSwgdGhpcy5tb2RlbCwgZm9ybWF0dGVkUGFyYW1zLCB0aGlzLnJlcXVlc3RPcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW1iZWRzIGFuIGFycmF5IG9mIHtAbGluayBFbWJlZENvbnRlbnRSZXF1ZXN0fXMuXG4gICAgICovXG4gICAgYXN5bmMgYmF0Y2hFbWJlZENvbnRlbnRzKGJhdGNoRW1iZWRDb250ZW50UmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gYmF0Y2hFbWJlZENvbnRlbnRzKHRoaXMuYXBpS2V5LCB0aGlzLm1vZGVsLCBiYXRjaEVtYmVkQ29udGVudFJlcXVlc3QsIHRoaXMucmVxdWVzdE9wdGlvbnMpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVG9wLWxldmVsIGNsYXNzIGZvciB0aGlzIFNES1xuICogQHB1YmxpY1xuICovXG5jbGFzcyBHb29nbGVHZW5lcmF0aXZlQUkge1xuICAgIGNvbnN0cnVjdG9yKGFwaUtleSkge1xuICAgICAgICB0aGlzLmFwaUtleSA9IGFwaUtleTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIHtAbGluayBHZW5lcmF0aXZlTW9kZWx9IGluc3RhbmNlIGZvciB0aGUgcHJvdmlkZWQgbW9kZWwgbmFtZS5cbiAgICAgKi9cbiAgICBnZXRHZW5lcmF0aXZlTW9kZWwobW9kZWxQYXJhbXMsIHJlcXVlc3RPcHRpb25zKSB7XG4gICAgICAgIGlmICghbW9kZWxQYXJhbXMubW9kZWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBHb29nbGVHZW5lcmF0aXZlQUlFcnJvcihgTXVzdCBwcm92aWRlIGEgbW9kZWwgbmFtZS4gYCArXG4gICAgICAgICAgICAgICAgYEV4YW1wbGU6IGdlbmFpLmdldEdlbmVyYXRpdmVNb2RlbCh7IG1vZGVsOiAnbXktbW9kZWwtbmFtZScgfSlgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRpdmVNb2RlbCh0aGlzLmFwaUtleSwgbW9kZWxQYXJhbXMsIHJlcXVlc3RPcHRpb25zKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEJsb2NrUmVhc29uLCBDaGF0U2Vzc2lvbiwgRmluaXNoUmVhc29uLCBGdW5jdGlvbkNhbGxpbmdNb2RlLCBGdW5jdGlvbkRlY2xhcmF0aW9uU2NoZW1hVHlwZSwgR2VuZXJhdGl2ZU1vZGVsLCBHb29nbGVHZW5lcmF0aXZlQUksIEdvb2dsZUdlbmVyYXRpdmVBSUVycm9yLCBHb29nbGVHZW5lcmF0aXZlQUlGZXRjaEVycm9yLCBHb29nbGVHZW5lcmF0aXZlQUlSZXF1ZXN0SW5wdXRFcnJvciwgR29vZ2xlR2VuZXJhdGl2ZUFJUmVzcG9uc2VFcnJvciwgSGFybUJsb2NrVGhyZXNob2xkLCBIYXJtQ2F0ZWdvcnksIEhhcm1Qcm9iYWJpbGl0eSwgUE9TU0lCTEVfUk9MRVMsIFRhc2tUeXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iLCAiaW1wb3J0IHsgQ2hhdFNlc3Npb24sIEdlbmVyYXRpdmVNb2RlbCwgR29vZ2xlR2VuZXJhdGl2ZUFJIH0gZnJvbSAnQGdvb2dsZS9nZW5lcmF0aXZlLWFpJztcbmltcG9ydCBHZW1pbmlQbHVnaW4gZnJvbSAnbWFpbic7XG5pbXBvcnQgeyBBcHAsIFRGaWxlLCBWYXVsdCB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGNsYXNzIEdlbWluaUNoYXQge1xuICAgICNBUElfS0VZOiBzdHJpbmc7XG4gICAgbWVzc2FnZXM6IENoYXRNZXNzYWdlW107XG4gICAgI21vZGVsOiBHZW5lcmF0aXZlTW9kZWw7XG4gICAgYXBwOiBBcHA7XG4gICAgY2hhdE5hbWU6IHN0cmluZ1xuICAgICNzZXNzaW9uOiBDaGF0U2Vzc2lvbjtcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogR2VtaW5pUGx1Z2luLCBhcHA6IEFwcCkge1xuICAgICAgICB0aGlzLiNBUElfS0VZID0gcGx1Z2luLnNldHRpbmdzLkdlbWluaV9BcGlfS2V5O1xuICAgICAgICB0aGlzLiNtb2RlbCA9IG5ldyBHb29nbGVHZW5lcmF0aXZlQUkodGhpcy4jQVBJX0tFWSkuZ2V0R2VuZXJhdGl2ZU1vZGVsKHsgbW9kZWw6IFwiZ2VtaW5pLTEuNS1mbGFzaFwiIH0pO1xuICAgICAgICB0aGlzLiNzZXNzaW9uID0gdGhpcy4jbW9kZWwuc3RhcnRDaGF0KClcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMubWVzc2FnZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jaGF0TmFtZSA9IFwiVW50aXRsZWQgR2VtaW5pIENoYXRcIlxuICAgIH1cblxuICAgIGFzeW5jIHNlbmRVc2VyTWVzc2FnZSh0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgdXNlck1lc3NhZ2UgPSBuZXcgQ2hhdE1lc3NhZ2UodGV4dCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMubWVzc2FnZXMucHVzaCh1c2VyTWVzc2FnZSk7XG5cbiAgICAgICAgLy8gU2VuZCB0aGUgbWVzc2FnZSB0byB0aGUgbW9kZWwgYW5kIGhhbmRsZSB0aGUgcmVzcG9uc2VcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy4jc2Vzc2lvbi5zZW5kTWVzc2FnZSh1c2VyTWVzc2FnZS50ZXh0KTtcbiAgICAgICAgY29uc3QgbW9kZWxNZXNzYWdlID0gbmV3IENoYXRNZXNzYWdlKHJlc3VsdC5yZXNwb25zZS50ZXh0KCksIGZhbHNlKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlcy5wdXNoKG1vZGVsTWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBtb2RlbE1lc3NhZ2U7XG4gICAgfVxuXG4gICAgY29tcGlsZUhpc3RvcnkoKSB7XG4gICAgICAgIGxldCBoaXN0b3J5ID0gdGhpcy5tZXNzYWdlcy5tYXAobWVzc2FnZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJvbGU6IG1lc3NhZ2UudXNlciA/IFwidXNlclwiIDogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgIHBhcnRzOiBtZXNzYWdlLnRleHRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLm1lc3NhZ2VzKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlSGlzdG9yeShjaGF0TmFtZTogU3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGhpc3RvcnkgPSBKU09OLnN0cmluZ2lmeSh0aGlzLm1lc3NhZ2VzKTtcbiAgICAgICAgY29uc3QgZmlsZVBhdGggPSBgQ2hhdEhpc3RvcnkvJHtjaGF0TmFtZX0uZ2VtaW5pYDtcbiAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci53cml0ZShmaWxlUGF0aCwgaGlzdG9yeSk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZEhpc3RvcnlGcm9tRmlsZShmaWxlOlRGaWxlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgQ3JlYXRpbmcgY2hhdCBmcm9tOiAke2ZpbGV9YClcbiAgICAgICAgICAgIGxldCBmID0gZmlsZTtcbiAgICAgICAgICAgIGlmIChmIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXROYW1lID0gZi5iYXNlbmFtZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXRoIEVycm9yIGZvcjogJHtmaWxlLnBhdGh9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBoaXN0b3J5ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5yZWFkKGZpbGUucGF0aCk7XG5cbiAgICAgICAgICAgIHRoaXMubWVzc2FnZXMgPSBKU09OLnBhcnNlKGhpc3RvcnkpLm1hcCgobXNnOiB7IHRleHQ6IHN0cmluZzsgdXNlcjogYm9vbGVhbiB9KSA9PiBuZXcgQ2hhdE1lc3NhZ2UobXNnLnRleHQsIG1zZy51c2VyKSk7XG5cbiAgICAgICAgICAgIGxldCBoID0gdGhpcy5tZXNzYWdlcy5tYXAobWVzc2FnZSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogbWVzc2FnZS51c2VyID8gXCJ1c2VyXCIgOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcnRzOiBbeyB0ZXh0OiBtZXNzYWdlLnRleHQgfV1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLiNzZXNzaW9uID0gYXdhaXQgdGhpcy4jbW9kZWwuc3RhcnRDaGF0KHsgaGlzdG9yeTogaCB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTm8gcHJldmlvdXMgY2hhdCBoaXN0b3J5IGZvdW5kLCBzdGFydGluZyBmcmVzaC5cIik7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzID0gW107XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIENoYXRNZXNzYWdlIHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdXNlcjogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHRleHQ6IHN0cmluZywgdXNlcjogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgICAgICB0aGlzLnVzZXIgPSB1c2VyO1xuICAgIH1cbn0iLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW4gfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IENoYXRNZXNzYWdlQ29tcG9uZW50IH0gZnJvbSBcIi4vQ2hhdE1lc3NhZ2VDb21wb25lbnRcIlxuaW1wb3J0IHsgR2VtaW5pQ2hhdCB9IGZyb20gXCIuLi9HZW1pbmlDaGF0XCI7XG5pbXBvcnQgR2VtaW5pUGx1Z2luIGZyb20gXCJtYWluXCI7XG5cbnR5cGUgTWVzc2FnZUxpc3RlbmVyID0gKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZDtcblxuZXhwb3J0IGNsYXNzIENoYXRDb21wb25lbnQge1xuICAgIHByaXZhdGUgY2hhdElucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHByaXZhdGUgY2hhdERpc3BsYXk6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgcGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBtZXNzYWdlc0NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBzZW5kQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcblxuICAgIEdlbWluaUNoYXQ6IEdlbWluaUNoYXQ7XG4gICAgcHJpdmF0ZSBBcHA6IEFwcDtcbiAgICBwcml2YXRlIFBsdWdpbjogR2VtaW5pUGx1Z2luO1xuICAgIG5ld01lc3NhZ2VMaXN0ZW5lcnM6IE1lc3NhZ2VMaXN0ZW5lcltdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudCwgQXBwOiBBcHAsIFBsdWdpbjogR2VtaW5pUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudCA9IHBhcmVudEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuR2VtaW5pQ2hhdCA9IG5ldyBHZW1pbmlDaGF0KFBsdWdpbiwgQXBwKTtcbiAgICAgICAgdGhpcy5BcHAgPSBBcHA7XG4gICAgICAgIHRoaXMuUGx1Z2luID0gUGx1Z2luO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVDaGF0VUkoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRpYWxpemVDaGF0VUkoKSB7XG5cbiAgICAgICAgLy8gQ2hhdCBkaXNwbGF5IHdpdGhpbiB0aGUgY29udGFpbmVyLCB0YWtpbmcgdXAgYWxsIGF2YWlsYWJsZSBzcGFjZVxuICAgICAgICB0aGlzLmNoYXREaXNwbGF5ID0gdGhpcy5wYXJlbnRFbGVtZW50LmNyZWF0ZURpdih7IGNsczogJ2dlbWluaS1jaGF0LWRpc3BsYXknIH0pO1xuXG4gICAgICAgIC8vIENyZWF0ZSBhIGNvbnRhaW5lciBmb3IgdGhlIGNoYXQgbWVzc2FnZXNcbiAgICAgICAgdGhpcy5tZXNzYWdlc0NvbnRhaW5lciA9IHRoaXMuY2hhdERpc3BsYXkuY3JlYXRlRGl2KHsgY2xzOiAnbWVzc2FnZXMtY29udGFpbmVyJyB9KTtcblxuICAgICAgICBjb25zdCBpbnB1dENvbnRhaW5lciA9IHRoaXMuY2hhdERpc3BsYXkuY3JlYXRlRGl2KHsgY2xzOiAnaW5wdXQtY29udGFpbmVyJyB9KTtcblxuICAgICAgICB0aGlzLmNoYXRJbnB1dCA9IGlucHV0Q29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGNsczogJ2dlbWluaS1jaGF0LWlucHV0J1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jaGF0SW5wdXQucGxhY2Vob2xkZXIgPSAnQXNrIEdlbWluaS4uLic7XG5cbiAgICAgICAgLy8gU2VuZCBidXR0b25cbiAgICAgICAgdGhpcy5zZW5kQnV0dG9uID0gaW5wdXRDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHtcbiAgICAgICAgICAgIHRleHQ6ICdTZW5kJyxcbiAgICAgICAgICAgIGNsczogJ3NlbmQtYnV0dG9uJ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZW5kQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5oYW5kbGVDaGF0SW5wdXQoKSk7XG5cbiAgICAgICAgdGhpcy5jaGF0SW5wdXQucGxhY2Vob2xkZXIgPSAnQXNrIEdlbWluaS4uLic7XG4gICAgICAgIHRoaXMuY2hhdElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2hhdElucHV0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBsb2FkQ2hhdChHZW1pbmlDaGF0OiBHZW1pbmlDaGF0KSB7XG4gICAgICAgIHRoaXMuR2VtaW5pQ2hhdCA9IEdlbWluaUNoYXQ7XG5cbiAgICAgICAgLy9Mb2FkIHByZXZpb3VzIG1lc3NhZ2VzXG4gICAgICAgIEdlbWluaUNoYXQubWVzc2FnZXMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheU1lc3NhZ2UoZWxlbWVudC50ZXh0LCBlbGVtZW50LnVzZXIpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgaGFuZGxlQ2hhdElucHV0KCkge1xuICAgICAgICBjb25zdCB1c2VySW5wdXQgPSB0aGlzLmNoYXRJbnB1dC52YWx1ZTtcbiAgICAgICAgaWYgKHVzZXJJbnB1dCA9PSBcIlwiKSByZXR1cm47XG4gICAgICAgIHRoaXMuZGlzcGxheU1lc3NhZ2UodXNlcklucHV0LCB0cnVlKTtcbiAgICAgICAgdGhpcy5jaGF0SW5wdXQudmFsdWUgPSAnJztcbiAgICAgICAgdGhpcy5zaG93VHlwaW5nQW5pbWF0aW9uKCk7XG5cbiAgICAgICAgY29uc3QgYWlSZXNwb25zZSA9IGF3YWl0IHRoaXMuR2VtaW5pQ2hhdC5zZW5kVXNlck1lc3NhZ2UodXNlcklucHV0KTtcblxuICAgICAgICB0aGlzLmRpc3BsYXlNZXNzYWdlKGFpUmVzcG9uc2UudGV4dCwgZmFsc2UpO1xuICAgICAgICB0aGlzLmhpZGVUeXBpbmdBbmltYXRpb24oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3dUeXBpbmdBbmltYXRpb24oKSB7XG4gICAgICAgIGNvbnN0IHR5cGluZ0luZGljYXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0eXBpbmdJbmRpY2F0b3IuY2xhc3NOYW1lID0gXCJ0eXBpbmctaW5kaWNhdG9yXCI7XG5cbiAgICAgICAgdGhpcy5tZXNzYWdlc0NvbnRhaW5lci5wcmVwZW5kKHR5cGluZ0luZGljYXRvcilcblxuICAgICAgICB0eXBpbmdJbmRpY2F0b3IuY3JlYXRlU3Bhbih7fSk7XG4gICAgICAgIHR5cGluZ0luZGljYXRvci5jcmVhdGVTcGFuKHt9KTtcbiAgICAgICAgdHlwaW5nSW5kaWNhdG9yLmNyZWF0ZVNwYW4oe30pO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGlkZVR5cGluZ0FuaW1hdGlvbigpIHtcbiAgICAgICAgY29uc3QgdHlwaW5nSW5kaWNhdG9yID0gdGhpcy5jaGF0RGlzcGxheS5xdWVyeVNlbGVjdG9yKCcudHlwaW5nLWluZGljYXRvcicpO1xuICAgICAgICBpZiAodHlwaW5nSW5kaWNhdG9yKSB7XG4gICAgICAgICAgICB0eXBpbmdJbmRpY2F0b3IucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGRpc3BsYXlNZXNzYWdlKHRleHQ6IHN0cmluZywgdXNlcjogYm9vbGVhbikge1xuICAgICAgICBuZXcgQ2hhdE1lc3NhZ2VDb21wb25lbnQodGV4dCwgdXNlciwgdGhpcy5tZXNzYWdlc0NvbnRhaW5lciwgdGhpcy5BcHAsIHRoaXMuUGx1Z2luKTtcbiAgICAgICAgdGhpcy5ub3RpZnlNZXNzYWdlTGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzY3JvbGxUb0JvdHRvbSgpIHtcbiAgICAgICAgLy8gRW5zdXJlIHRoZSBsYXRlc3QgbWVzc2FnZXMgYXJlIHZpc2libGVcbiAgICAgICAgdGhpcy5tZXNzYWdlc0NvbnRhaW5lci5zY3JvbGxUb3AgPSB0aGlzLm1lc3NhZ2VzQ29udGFpbmVyLnNjcm9sbEhlaWdodDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZm9jdXNJbnB1dCgpe1xuICAgICAgICB0aGlzLnNjcm9sbFRvQm90dG9tKCk7XG4gICAgICAgIHRoaXMuY2hhdElucHV0LmZvY3VzKCk7XG4gICAgfVxuXG4gICAgYWRkTGlzdGVuZXIobGlzdGVuZXI6IE1lc3NhZ2VMaXN0ZW5lcikge1xuICAgICAgICB0aGlzLm5ld01lc3NhZ2VMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBub3RpZnlNZXNzYWdlTGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLm5ld01lc3NhZ2VMaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IGxpc3RlbmVyKHRoaXMuR2VtaW5pQ2hhdC5jb21waWxlSGlzdG9yeSgpKSlcbiAgICB9XG5cbiAgICByZXNldCgpe1xuICAgICAgICB0aGlzLm1lc3NhZ2VzQ29udGFpbmVyLmVtcHR5KCk7XG4gICAgfVxufVxuXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUEsbUJBQTBLOzs7QUNBMUssc0JBQTREO0FBRXJELElBQU0sZ0JBQU4sY0FBNEIsa0NBQXlCO0FBQUEsRUFFeEQsWUFBWUMsTUFBb0IsWUFBbUM7QUFDL0QsVUFBTUEsSUFBRztBQURtQjtBQUFBLEVBRWhDO0FBQUEsRUFDQSxXQUFvQjtBQUNoQixXQUFPLElBQUksTUFBTSxTQUFTLEVBQUUsT0FBTyxVQUFRLEtBQUssYUFBYSxRQUFRO0FBQUEsRUFDekU7QUFBQSxFQUNBLFlBQVksTUFBcUI7QUFDN0IsV0FBTyxLQUFLLEtBQUssUUFBUSxXQUFXLEVBQUU7QUFBQSxFQUMxQztBQUFBLEVBQ0EsYUFBYSxNQUFhLEtBQXVDO0FBQzdELFNBQUssV0FBVyxJQUFJO0FBQUEsRUFDeEI7QUFDSjs7O0FDZkEsSUFBQUMsbUJBQXVHOzs7QUNEdkcsSUFBQUMsbUJBQTZDO0FBQTdDO0FBRU8sSUFBTSx1QkFBTixNQUEyQjtBQUFBLEVBTzlCLFlBQVksTUFBYyxNQUFlLFFBQXFCQyxNQUFTLFFBQWU7QUFOdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdJLHVCQUFLLE9BQVE7QUFDYix1QkFBSyxjQUFlO0FBQ3BCLHVCQUFLLGdCQUFpQjtBQUN0Qix1QkFBSyxNQUFPQTtBQUNaLHVCQUFLLFNBQVU7QUFHZixVQUFNLFVBQVUsU0FBUyxjQUFjLEtBQUs7QUFHNUMsVUFBTSxjQUFjLFNBQVMsY0FBYyxLQUFLO0FBQ2hELGdCQUFZLFNBQVMsc0JBQXNCO0FBQzNDLGdCQUFZLE1BQU0sVUFBVTtBQWM1QixVQUFNLGFBQWEsU0FBUyxjQUFjLFFBQVE7QUFDbEQsZUFBVyxTQUFTLGdCQUFnQjtBQUNw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Z0JBO0FBQ3JDLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxJQUNoQyxDQUFDLENBQUM7QUFFSixRQUFJLHlCQUFRLFdBQVcsRUFDckIsUUFBUSxtQkFBbUIsRUFDM0IsUUFBUSxnR0FBZ0csRUFDeEc7QUFBQSxNQUFRLFVBQVEsS0FDZixlQUFlLGFBQWEsRUFDNUIsU0FBUyxLQUFLLE9BQU8sU0FBUyxlQUFlLEVBQzdDLFNBQVMsT0FBTyxVQUFVO0FBQzFCLGFBQUssT0FBTyxTQUFTLGtCQUFrQjtBQUN2QyxjQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsTUFDaEMsQ0FBQztBQUFBLElBRUY7QUFBQSxFQUVGO0FBQ0Q7IiwKICAibmFtZXMiOiBbImltcG9ydF9vYnNpZGlhbiIsICJhcHAiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJhcHAiLCAiSGFybUNhdGVnb3J5IiwgIkhhcm1CbG9ja1RocmVzaG9sZCIsICJIYXJtUHJvYmFiaWxpdHkiLCAiQmxvY2tSZWFzb24iLCAiRmluaXNoUmVhc29uIiwgIlRhc2tUeXBlIiwgIkZ1bmN0aW9uQ2FsbGluZ01vZGUiLCAiRnVuY3Rpb25EZWNsYXJhdGlvblNjaGVtYVR5cGUiLCAiVGFzayIsICJfYSIsICJpbXBvcnRfb2JzaWRpYW4iLCAiYXBwIiwgImVycm9yIiwgIkFwcCIsICJQbHVnaW4iLCAiR2VtaW5pQ2hhdCIsICJhcHAiLCAibGVhZiIsICJhcHAiLCAidmFsdWUiXQp9Cg==
